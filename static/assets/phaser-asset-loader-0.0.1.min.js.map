{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 35a923110eab4d58431c","webpack:///./src/AssetLoader.js"],"names":["AssetLoader","game","json","hasOwnProperty","loadBaseURL","baseURL","loadCrossOrigin","crossOrigin","loadEnableParallel","enableParallel","loadPath","path","loadResetLocked","resetLocked","loadAtlas","atlas","loadAtlasJSONArray","atlasJSONArray","loadAtlasJSONHash","atlasJSONHash","loadAtlasXML","atlasXML","loadAudio","audio","loadAudioSprite","audioSprite","loadBinary","binary","loadBitmapFont","bitmapFont","loadImage","image","loadImages","images","loadJSON","loadPack","pack","loadPhysics","physics","loadScript","script","loadShader","shader","loadSpritesheet","spritesheet","loadText","text","loadTilemap","tilemap","loadVideo","video","loadXML","xml","load","key","value","i","textureURL","atlasURL","atlasData","format","Array","isArray","length","console","log","isHashMap","Phaser","Loader","TEXTURE_ATLAS_JSON_ARRAY","TEXTURE_ATLAS_JSON_HASH","TEXTURE_ATLAS_XML_STARLING","urls","autoDecode","Object","keys","jsonURL","jsonData","url","xSpacing","ySpacing","overwrite","data","PHYSICS_LIME_CORONA_JSON","PHYSICS_PHASER_JSON","frameWidth","frameHeight","frameMax","margin","spacing","Tilemap","CSV","TILED_JSON","loadEvent","asBlob"],"mappings":"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","file":"phaser-asset-loader-0.0.1.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"AssetLoader\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"AssetLoader\"] = factory();\n\telse\n\t\troot[\"AssetLoader\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 35a923110eab4d58431c","/**\n * Created by Genell Radley in 2017.\n *\n * https://github.com/gradley/AssetLoader\n */\n\n/**\n * Load assets from a json file.\n *\n * https://phaser.io/docs/2.6.2/Phaser.Loader.html\n *\n * There are some Phaser.Loader that take in a callback and/or callbackContext.\n * These are: binary, pack, script, withSyncPoints\n * If you want to use these loaders with callbacks, you'll have to do it from\n * code, not json.\n *\n * You can set the value to either the default datatype or an object with the\n * parameters you want to set.\n *\n * TODO: for json data, have to put the json object in the assets.json, can't\n * reference another json because it won't be loaded yet.\n */\nclass AssetLoader {\n\n    /**\n     * Takes in properly formatted json for asset loading.\n     * @param {Phaser.Game} game - A reference to the currently running game.\n     * @param {json} json - The loaded json. You will have to load the json for\n     *     this file manually but everything else can load from the\n     *     AssetLoader.\n     */\n    constructor(game, json) {\n        this.game = game;\n\n        if (json.hasOwnProperty(\"baseURL\")) this.loadBaseURL(json.baseURL);\n        if (json.hasOwnProperty(\"crossOrigin\")) this.loadCrossOrigin(json.crossOrigin);\n        if (json.hasOwnProperty(\"enableParallel\")) this.loadEnableParallel(json.enableParallel);\n        if (json.hasOwnProperty(\"path\")) this.loadPath(json.path);\n        if (json.hasOwnProperty(\"resetLocked\")) this.loadResetLocked(json.resetLocked);\n        if (json.hasOwnProperty(\"atlas\")) this.loadAtlas(json.atlas);\n        if (json.hasOwnProperty(\"atlasJSONArray\")) this.loadAtlasJSONArray(json.atlasJSONArray);\n        if (json.hasOwnProperty(\"atlasJSONHash\")) this.loadAtlasJSONHash(json.atlasJSONHash);\n        if (json.hasOwnProperty(\"atlasXML\")) this.loadAtlasXML(json.atlasXML);\n        if (json.hasOwnProperty(\"audio\")) this.loadAudio(json.audio);\n        if (json.hasOwnProperty(\"audioSprite\")) this.loadAudioSprite(json.audioSprite);\n        if (json.hasOwnProperty(\"binary\")) this.loadBinary(json.binary);\n        if (json.hasOwnProperty(\"bitmapFont\")) this.loadBitmapFont(json.bitmapFont);\n        if (json.hasOwnProperty(\"image\")) this.loadImage(json.image);\n        if (json.hasOwnProperty(\"images\")) this.loadImages(json.images);\n        if (json.hasOwnProperty(\"json\")) this.loadJSON(json.json);\n        if (json.hasOwnProperty(\"pack\")) this.loadPack(json.pack);\n        if (json.hasOwnProperty(\"physics\")) this.loadPhysics(json.physics);\n        if (json.hasOwnProperty(\"script\")) this.loadScript(json.script);\n        if (json.hasOwnProperty(\"shader\")) this.loadShader(json.shader);\n        if (json.hasOwnProperty(\"spritesheet\")) this.loadSpritesheet(json.spritesheet);\n        if (json.hasOwnProperty(\"text\")) this.loadText(json.text);\n        if (json.hasOwnProperty(\"tilemap\")) this.loadTilemap(json.tilemap);\n        if (json.hasOwnProperty(\"video\")) this.loadVideo(json.video);\n        if (json.hasOwnProperty(\"xml\")) this.loadXML(json.xml);\n    }\n\n    // -------- baseURL -------- //\n\n    loadBaseURL(json) {\n        if (typeof json === \"string\" && json !== \"\") {\n            this.game.load.baseURL = json;\n        }\n    }\n\n    // -------- crossOrigin -------- //\n\n    loadCrossOrigin(json) {\n        if (typeof json === \"string\" && json !== \"\" || typeof json === \"boolean\") {\n            this.game.load.crossOrigin = json;\n        }\n    }\n\n    // -------- enableParallel -------- //\n\n    loadEnableParallel(json) {\n        if (typeof json === \"boolean\") {\n            this.game.load.enableParallel = json;\n        }\n    }\n\n    // -------- path -------- //\n\n    loadPath(json) {\n        if (typeof json === \"string\" && json !== \"\") {\n            this.game.load.path = json;\n        }\n    }\n\n    // -------- resetLocked -------- //\n\n    loadResetLocked(json) {\n        if (typeof json === \"boolean\") {\n            this.game.load.resetLocked = json;\n        }\n    }\n\n    // -------- atlas -------- //\n\n    loadAtlas(json) {\n        let key;\n        let value;\n        let i;\n        let textureURL;\n        let atlasURL;\n        let atlasData;\n        let format;\n        if (typeof json === \"string\") {\n            this.game.load.atlas(json);\n        }\n        else if (Array.isArray(json)) {\n            for (i = 0; i < json.length; i++) {\n                if (typeof json[i] === \"string\") {\n                    this.game.load.atlas(json[i]);\n                } else {\n                    console.log(\"AssetLoader:: atlas keys must be of type 'string'.\");\n                }\n            }\n        }\n        else if (AssetLoader.isHashMap(json)) {\n            for (key in json) {\n                value = json[key];\n                if (AssetLoader.isHashMap(value)) {\n                    textureURL = (value.hasOwnProperty(\"textureURL\")) ? value[\"textureURL\"] : key + \".png\";\n                    if (textureURL && typeof textureURL === \"string\") {\n                        atlasURL = (value.hasOwnProperty(\"atlasURL\")) ? value[\"atlasURL\"] : key + \".json\";\n                        if (typeof atlasURL === \"string\") {\n                            atlasData = (value.hasOwnProperty(\"atlasData\")) ? value[\"atlasData\"] : null;\n                            if (atlasData !== null && !AssetLoader.isHashMap(atlasData)) {\n                                console.log(\"AssetLoader:: (key: \" + key + \") atlas 'atlasData' must be a json object.\");\n                            } else {\n                                format = (value.hasOwnProperty(\"format\")) ? value[\"format\"] : Phaser.Loader.TEXTURE_ATLAS_JSON_ARRAY;\n                                if (format === Phaser.Loader.TEXTURE_ATLAS_JSON_ARRAY || format === Phaser.Loader.TEXTURE_ATLAS_JSON_HASH || format === Phaser.Loader.TEXTURE_ATLAS_XML_STARLING) {\n                                    this.game.load.atlas(key, textureURL, atlasURL, atlasData, format);\n                                } else {\n                                    console.log(\"AssetLoader:: (key: \" + key + \") atlas 'format' must be Phaser.Loader.TEXTURE_ATLAS_JSON_ARRAY (0) or Phaser.Loader.TEXTURE_ATLAS_JSON_HASH (1) or Phaser.Loader.TEXTURE_ATLAS_XML_STARLING (2).\");\n                                }\n                            }\n                        } else {\n                            console.log(\"AssetLoader:: (key: \" + key + \") atlas 'atlasURL' must be of type 'string'.\");\n                        }\n                    } else {\n                        console.log(\"AssetLoader:: (key: \" + key + \") atlas 'textureURL' must be of type 'string'.\");\n                    }\n                } else {\n                    console.log(\"AssetLoader:: (key: \" + key + \") atlas json structure is malformed.\");\n                }\n            }\n        } else {\n            console.log(\"AssetLoader:: 'atlas' json structure is malformed.\");\n        }\n    }\n\n    // -------- atlasJSONArray -------- //\n\n    loadAtlasJSONArray(json) {\n        let key;\n        let value;\n        let i;\n        let textureURL;\n        let atlasURL;\n        let atlasData;\n        if (typeof json === \"string\") {\n            this.game.load.atlasJSONArray(json);\n        }\n        else if (Array.isArray(json)) {\n            for (i = 0; i < json.length; i++) {\n                if (typeof json[i] === \"string\") {\n                    this.game.load.atlasJSONArray(json[i]);\n                } else {\n                    console.log(\"AssetLoader:: atlasJSONArray keys must be of type 'string'.\");\n                }\n            }\n        }\n        else if (AssetLoader.isHashMap(json)) {\n            for (key in json) {\n                value = json[key];\n                if (AssetLoader.isHashMap(value)) {\n                    textureURL = (value.hasOwnProperty(\"textureURL\")) ? value[\"textureURL\"] : key + \".png\";\n                    if (textureURL && typeof textureURL === \"string\") {\n                        atlasURL = (value.hasOwnProperty(\"atlasURL\")) ? value[\"atlasURL\"] : key + \".json\";\n                        if (typeof atlasURL === \"string\") {\n                            atlasData = (value.hasOwnProperty(\"atlasData\")) ? value[\"atlasData\"] : null;\n                            if (atlasData !== null && !AssetLoader.isHashMap(atlasData)) {\n                                console.log(\"AssetLoader:: (key: \" + key + \") atlasJSONArray 'atlasData' must be a json object.\");\n                            } else {\n                                this.game.load.atlasJSONArray(key, textureURL, atlasURL, atlasData);\n                            }\n                        } else {\n                            console.log(\"AssetLoader:: (key: \" + key + \") atlasJSONArray 'atlasURL' must be of type 'string'.\");\n                        }\n                    } else {\n                        console.log(\"AssetLoader:: (key: \" + key + \") atlasJSONArray 'textureURL' must be of type 'string'.\");\n                    }\n                } else {\n                    console.log(\"AssetLoader:: (key: \" + key + \") atlasJSONArray json structure is malformed.\");\n                }\n            }\n        } else {\n            console.log(\"AssetLoader:: 'atlasJSONArray' json structure is malformed.\");\n        }\n    }\n\n    // -------- atlasJSONHash -------- //\n\n    loadAtlasJSONHash(json) {\n        let key;\n        let value;\n        let i;\n        let textureURL;\n        let atlasURL;\n        let atlasData;\n        if (typeof json === \"string\") {\n            this.game.load.atlasJSONHash(json);\n        }\n        else if (Array.isArray(json)) {\n            for (i = 0; i < json.length; i++) {\n                if (typeof json[i] === \"string\") {\n                    this.game.load.atlasJSONHash(json[i]);\n                } else {\n                    console.log(\"AssetLoader:: atlasJSONHash keys must be of type 'string'.\");\n                }\n            }\n        }\n        else if (AssetLoader.isHashMap(json)) {\n            for (key in json) {\n                value = json[key];\n                if (AssetLoader.isHashMap(value)) {\n                    textureURL = (value.hasOwnProperty(\"textureURL\")) ? value[\"textureURL\"] : key + \".png\";\n                    if (textureURL && typeof textureURL === \"string\") {\n                        atlasURL = (value.hasOwnProperty(\"atlasURL\")) ? value[\"atlasURL\"] : key + \".json\";\n                        if (typeof atlasURL === \"string\") {\n                            atlasData = (value.hasOwnProperty(\"atlasData\")) ? value[\"atlasData\"] : null;\n                            if (atlasData !== null && !AssetLoader.isHashMap(atlasData)) {\n                                console.log(\"AssetLoader:: (key: \" + key + \") atlasJSONHash 'atlasData' must be a json object.\");\n                            } else {\n                                this.game.load.atlasJSONHash(key, textureURL, atlasURL, atlasData);\n                            }\n                        } else {\n                            console.log(\"AssetLoader:: (key: \" + key + \") atlasJSONHash 'atlasURL' must be of type 'string'.\");\n                        }\n                    } else {\n                        console.log(\"AssetLoader:: (key: \" + key + \") atlasJSONHash 'textureURL' must be of type 'string'.\");\n                    }\n                } else {\n                    console.log(\"AssetLoader:: (key: \" + key + \") atlasJSONHash json structure is malformed.\");\n                }\n            }\n        } else {\n            console.log(\"AssetLoader:: 'atlasJSONHash' json structure is malformed.\");\n        }\n    }\n\n    // -------- atlasXML -------- //\n\n    loadAtlasXML(json) {\n        let key;\n        let value;\n        let i;\n        let textureURL;\n        let atlasURL;\n        let atlasData;\n        if (typeof json === \"string\") {\n            this.game.load.atlasXML(json);\n        }\n        else if (Array.isArray(json)) {\n            for (i = 0; i < json.length; i++) {\n                if (typeof json[i] === \"string\") {\n                    this.game.load.atlasXML(json[i]);\n                } else {\n                    console.log(\"AssetLoader:: atlasXML keys must be of type 'string'.\");\n                }\n            }\n        }\n        else if (AssetLoader.isHashMap(json)) {\n            for (key in json) {\n                value = json[key];\n                if (AssetLoader.isHashMap(value)) {\n                    textureURL = (value.hasOwnProperty(\"textureURL\")) ? value[\"textureURL\"] : key + \".png\";\n                    if (textureURL && typeof textureURL === \"string\") {\n                        atlasURL = (value.hasOwnProperty(\"atlasURL\")) ? value[\"atlasURL\"] : key + \".xml\";\n                        if (typeof atlasURL === \"string\") {\n                            atlasData = (value.hasOwnProperty(\"atlasData\")) ? value[\"atlasData\"] : null;\n                            if (atlasData !== null && !AssetLoader.isHashMap(atlasData)) {\n                                console.log(\"AssetLoader:: (key: \" + key + \") atlasXML 'atlasData' must be a json object.\");\n                            } else {\n                                this.game.load.atlasXML(key, textureURL, atlasURL, atlasData);\n                            }\n                        } else {\n                            console.log(\"AssetLoader:: (key: \" + key + \") atlasXML 'atlasURL' must be of type 'string'.\");\n                        }\n                    } else {\n                        console.log(\"AssetLoader:: (key: \" + key + \") atlasXML 'textureURL' must be of type 'string'.\");\n                    }\n                } else {\n                    console.log(\"AssetLoader:: (key: \" + key + \") atlasXML json structure is malformed.\");\n                }\n            }\n        } else {\n            console.log(\"AssetLoader:: 'atlasXML' json structure is malformed.\");\n        }\n    }\n\n    // -------- audio -------- //\n\n    loadAudio(json) {\n        let key;\n        let value;\n        let urls;\n        let autoDecode;\n        if (AssetLoader.isHashMap(json)) {\n            for (key in json) {\n                value = json[key];\n                if ((typeof value === \"string\" && value !== \"\") || (Array.isArray(value) && value.length > 0)) {\n                    this.game.load.audio(key, value);\n                }\n                else if (AssetLoader.isHashMap(value) && Object.keys(value).length > 0) {\n                    urls = (value.hasOwnProperty(\"urls\")) ? value[\"urls\"] : null;\n                    if ((typeof urls === \"string\" && urls !== \"\") || (Array.isArray(urls) && urls.length > 0)) {\n                        autoDecode = (value.hasOwnProperty(\"autoDecode\")) ? value[\"autoDecode\"] : true;\n                        if (typeof autoDecode === \"boolean\") {\n                            this.game.load.audio(key, urls, autoDecode);\n                        } else {\n                            console.log(\"AssetLoader:: (key: \" + key + \") audio 'autoDecode' must be of type 'boolean'.\");\n                        }\n                    } else {\n                        console.log(\"AssetLoader:: (key: \" + key + \") audio must have 'urls' defined and be of type 'string' or Array.\");\n                    }\n                } else {\n                    console.log(\"AssetLoader:: 'audio' json structure is malformed.\");\n                }\n            }\n        } else {\n            console.log(\"AssetLoader:: 'audio' json structure is malformed.\");\n        }\n    }\n\n    // -------- audioSprite -------- //\n\n    loadAudioSprite(json) {\n        let key;\n        let value;\n        let urls;\n        let jsonURL;\n        let jsonData;\n        let autoDecode;\n        if (AssetLoader.isHashMap(json)) {\n            for (key in json) {\n                value = json[key];\n                if (AssetLoader.isHashMap(value) && Object.keys(value).length > 0) {\n                    urls = (value.hasOwnProperty(\"urls\")) ? value[\"urls\"] : null;\n                    if ((typeof urls === \"string\" && urls !== \"\") || (Array.isArray(urls) && urls.length > 0)) {\n                        jsonURL = (value.hasOwnProperty(\"jsonURL\")) ? value[\"jsonURL\"] : null;\n                        if (jsonURL !== null && typeof jsonURL !== \"string\") {\n                            console.log(\"AssetLoader:: (key: \" + key + \") audioSprite 'jsonURL' must be of type 'string'.\");\n                        } else {\n                            jsonData = (value.hasOwnProperty(\"jsonData\")) ? value[\"jsonData\"] : null;\n                            if (jsonData !== null && !AssetLoader.isHashMap(jsonData)) {\n                                console.log(\"AssetLoader:: (key: \" + key + \") audioSprite 'jsonData' must be a json object.\");\n                            } else {\n                                if (jsonURL !== null || jsonData !== null) {\n                                    autoDecode = (value.hasOwnProperty(\"autoDecode\")) ? value[\"autoDecode\"] : true;\n                                    if (typeof autoDecode === \"boolean\") {\n                                        this.game.load.audioSprite(key, urls, jsonURL, jsonData, autoDecode);\n                                    } else {\n                                        console.log(\"AssetLoader:: (key: \" + key + \") audioSprite 'autoDecode' must be of type 'boolean'.\");\n                                    }\n                                } else {\n                                    console.log(\"AssetLoader:: (key: \" + key + \") audioSprite must have 'jsonURL' or 'jsonData' defined.\");\n                                }\n                            }\n                        }\n                    } else {\n                        console.log(\"AssetLoader:: (key: \" + key + \") audioSprite must have 'urls' defined and be of type 'string' or Array.\");\n                    }\n                } else {\n                    console.log(\"AssetLoader:: 'audioSprite' json structure is malformed.\");\n                }\n            }\n        } else {\n            console.log(\"AssetLoader:: 'audioSprite' json structure is malformed.\");\n        }\n    }\n\n    // -------- binary -------- //\n\n    loadBinary(json) {\n        let key;\n        let value;\n        let i;\n        let url;\n        if (typeof json === \"string\") {\n            this.game.load.binary(json);\n        }\n        else if (Array.isArray(json)) {\n            for (i = 0; i < json.length; i++) {\n                if (typeof json[i] === \"string\") {\n                    this.game.load.binary(json[i]);\n                } else {\n                    console.log(\"AssetLoader:: binary keys must be of type 'string'.\");\n                }\n            }\n        }\n        else if (AssetLoader.isHashMap(json)) {\n            for (key in json) {\n                value = json[key];\n                if (typeof value === \"string\" && value !== \"\") {\n                    this.game.load.binary(key, value);\n                }\n                else if (AssetLoader.isHashMap(value)) {\n                    url = (value.hasOwnProperty(\"url\")) ? value[\"url\"] : key + \".bin\";\n                    if (typeof url === \"string\") {\n                        this.game.load.binary(key, url);\n                    } else {\n                        console.log(\"AssetLoader:: (key: \" + key + \") binary must have a 'url' of type 'string' defined.\");\n                    }\n                } else {\n                    console.log(\"AssetLoader:: 'binary' json structure is malformed.\");\n                }\n            }\n        } else {\n            console.log(\"AssetLoader:: 'binary' json structure is malformed.\");\n        }\n    }\n\n    // -------- bitmapFont -------- //\n\n    loadBitmapFont(json) {\n        let key;\n        let value;\n        let i;\n        let textureURL;\n        let atlasURL;\n        let atlasData;\n        let xSpacing;\n        let ySpacing;\n        if (typeof json === \"string\") {\n            this.game.load.bitmapFont(json);\n        }\n        else if (Array.isArray(json)) {\n            for (i = 0; i < json.length; i++) {\n                if (typeof json[i] === \"string\") {\n                    this.game.load.bitmapFont(json[i]);\n                } else {\n                    console.log(\"AssetLoader:: bitmapFont keys must be of type 'string'.\");\n                }\n            }\n        }\n        else if (AssetLoader.isHashMap(json)) {\n            for (key in json) {\n                value = json[key];\n                if (AssetLoader.isHashMap(value)) {\n                    textureURL = (value.hasOwnProperty(\"textureURL\")) ? value[\"textureURL\"] : key + \".png\";\n                    if (textureURL && typeof textureURL === \"string\") {\n                        atlasURL = (value.hasOwnProperty(\"atlasURL\")) ? value[\"atlasURL\"] : key + \".xml\";\n                        if (typeof atlasURL === \"string\") {\n                            atlasData = (value.hasOwnProperty(\"atlasData\")) ? value[\"atlasData\"] : null;\n                            if (atlasData !== null && !AssetLoader.isHashMap(atlasData)) {\n                                console.log(\"AssetLoader:: (key: \" + key + \") bitmapFont 'atlasData' must be a json object.\");\n                            } else {\n                                xSpacing = (value.hasOwnProperty(\"xSpacing\")) ? value[\"xSpacing\"] : 0;\n                                ySpacing = (value.hasOwnProperty(\"ySpacing\")) ? value[\"ySpacing\"] : 0;\n                                if (typeof xSpacing === \"number\" && typeof ySpacing === \"number\") {\n                                    this.game.load.bitmapFont(key, textureURL, atlasURL, atlasData, xSpacing, ySpacing);\n                                } else {\n                                    console.log(\"AssetLoader:: (key: \" + key + \") bitmapFont 'xSpacing' and 'ySpacing' must be of type 'number'.\");\n                                }\n                            }\n                        } else {\n                            console.log(\"AssetLoader:: (key: \" + key + \") bitmapFont must have 'atlasURL' or 'atlasData' defined.\");\n                        }\n                    } else {\n                        console.log(\"AssetLoader:: (key: \" + key + \") bitmapFont must have a 'textureURL' defined.\");\n                    }\n                } else {\n                    console.log(\"AssetLoader:: 'bitmapFont' json structure is malformed.\");\n                }\n            }\n        } else {\n            console.log(\"AssetLoader:: 'bitmapFont' json structure is malformed.\");\n        }\n    }\n\n    // -------- image -------- //\n\n    loadImage(json) {\n        let key;\n        let value;\n        let i;\n        let url;\n        let overwrite;\n        if (typeof json === \"string\") {\n            this.game.load.image(json);\n        }\n        else if (Array.isArray(json)) {\n            for (i = 0; i < json.length; i++) {\n                if (typeof json[i] === \"string\") {\n                    this.game.load.image(json[i]);\n                } else {\n                    console.log(\"AssetLoader:: image keys must be of type 'string'.\");\n                }\n            }\n        }\n        else if (AssetLoader.isHashMap(json)) {\n            for (key in json) {\n                value = json[key];\n                if (typeof value === \"string\") {\n                    this.game.load.image(key, value);\n                }\n                else if (AssetLoader.isHashMap(value)) {\n                    url = (value.hasOwnProperty(\"url\")) ? value[\"url\"] : key + \".png\";\n                    if (typeof url === \"string\") {\n                        overwrite = (value.hasOwnProperty(\"overwrite\")) ? value[\"overwrite\"] : false;\n                        if (typeof overwrite === \"boolean\") {\n                            this.game.load.image(key, url, overwrite);\n                        } else {\n                            console.log(\"AssetLoader:: (key: \" + key + \") image 'overwrite' must be of type 'boolean'.\");\n                        }\n                    } else {\n                        console.log(\"AssetLoader:: (key: \" + key + \") image 'url' must be of type 'string'.\");\n                    }\n                } else {\n                    console.log(\"AssetLoader:: 'image' json structure is malformed.\");\n                }\n            }\n        } else {\n            console.log(\"AssetLoader:: 'image' json structure is malformed.\");\n        }\n    }\n\n    // -------- images -------- //\n\n    loadImages(json) {\n        let key;\n        let keys;\n        let urls;\n        if (Array.isArray(json)) {\n            this.game.load.images(json);\n        }\n        else if (AssetLoader.isHashMap(json)) {\n            keys = (json.hasOwnProperty(\"keys\")) ? json[\"keys\"] : null;\n            if (keys !== null && Array.isArray(keys) && keys.length > 0) {\n                urls = (json.hasOwnProperty(\"urls\")) ? json[\"urls\"] : null;\n                if (urls !== null && (!Array.isArray(urls) || urls.length < 1)) {\n                    console.log(\"AssetLoader:: images 'urls' must be of type 'Array' and must not be empty.\");\n                } else {\n                    this.game.load.images(keys, urls);\n                }\n            } else {\n                console.log(\"AssetLoader:: images must have 'keys' defined of type 'Array' and must not be empty.\");\n            }\n        } else {\n            console.log(\"AssetLoader:: 'images' json structure is malformed.\");\n        }\n    }\n\n    // -------- json -------- //\n\n    loadJSON(json) {\n        let key;\n        let value;\n        let i;\n        let url;\n        let overwrite;\n        if (typeof json === \"string\") {\n            this.game.load.json(json);\n        }\n        else if (Array.isArray(json)) {\n            for (i = 0; i < json.length; i++) {\n                if (typeof json[i] === \"string\") {\n                    this.game.load.json(json[i]);\n                } else {\n                    console.log(\"AssetLoader:: 'json' keys must be of type 'string'.\");\n                }\n            }\n        }\n        else if (AssetLoader.isHashMap(json)) {\n            for (key in json) {\n                value = json[key];\n                if (typeof value === \"string\") {\n                    this.game.load.json(key, value);\n                }\n                else if (AssetLoader.isHashMap(value)) {\n                    url = (value.hasOwnProperty(\"url\")) ? value[\"url\"] : key + \".json\";\n                    if (typeof url === \"string\") {\n                        overwrite = (value.hasOwnProperty(\"overwrite\")) ? value[\"overwrite\"] : false;\n                        if (typeof overwrite === \"boolean\") {\n                            this.game.load.json(key, url, overwrite);\n                        } else {\n                            console.log(\"AssetLoader:: (key: \" + key + \") json 'overwrite' must be of type 'boolean'.\");\n                        }\n                    } else {\n                        console.log(\"AssetLoader:: (key: \" + key + \") json 'url' must be of type 'string'.\");\n                    }\n                } else {\n                    console.log(\"AssetLoader:: 'json' json structure is malformed.\");\n                }\n            }\n        } else {\n            console.log(\"AssetLoader:: 'json' json structure is malformed.\");\n        }\n    }\n\n    // -------- pack -------- //\n\n    loadPack(json) {\n        let key;\n        let value;\n        if (AssetLoader.isHashMap(json)) {\n            for (key in json) {\n                value = json[key];\n                if (typeof value === \"string\") {\n                    this.game.load.pack(key, value);\n                }\n                else if (AssetLoader.isHashMap(value)) {\n                    this.game.load.pack(key, null, value);\n                } else {\n                    console.log(\"AssetLoader:: 'pack' json structure is malformed.\");\n                }\n            }\n        } else {\n            console.log(\"AssetLoader:: 'pack' json structure is malformed.\");\n        }\n    }\n\n    // -------- physics -------- //\n\n    loadPhysics(json) {\n        let key;\n        let i;\n        let value;\n        let url;\n        let data;\n        let format;\n        if (typeof json === \"string\") {\n            this.game.load.physics(json);\n        }\n        else if (Array.isArray(json)) {\n            for (i = 0; i < json.length; i++) {\n                if (typeof json[i] === \"string\") {\n                    this.game.load.physics(json[i]);\n                } else {\n                    console.log(\"AssetLoader:: physics keys must be of type 'string'.\");\n                }\n            }\n        }\n        else if (AssetLoader.isHashMap(json)) {\n            for (key in json) {\n                value = json[key];\n                if (typeof value === \"string\") {\n                    this.game.load.physics(key, value);\n                }\n                else if (AssetLoader.isHashMap(value)) {\n                    url = (value.hasOwnProperty(\"url\")) ? value[\"url\"] : key + \".json\";\n                    if (typeof url === \"string\") {\n                        data = (value.hasOwnProperty(\"data\")) ? value[\"data\"] : null;\n                        if (data !== null && !AssetLoader.isHashMap(data)) {\n                            console.log(\"AssetLoader:: (key: \" + key + \") physics 'data' must be of type 'object'.\");\n                        } else {\n                            format = (value.hasOwnProperty(\"format\")) ? value[\"format\"] : Phaser.Loader.PHYSICS_LIME_CORONA_JSON;\n                            if (format === Phaser.Loader.PHYSICS_LIME_CORONA_JSON || format === Phaser.Loader.PHYSICS_PHASER_JSON) {\n                                this.game.load.physics(key, url, data, format);\n                            } else {\n                                console.log(\"AssetLoader:: (key: \" + key + \") physics 'format' must be Phaser.Loader.PHYSICS_LIME_CORONA_JSON (3) or Phaser.Loader.PHYSICS_PHASER_JSON (4).\");\n                            }\n                        }\n                    } else {\n                        console.log(\"AssetLoader:: (key: \" + key + \") physics 'url' must be of type 'string'.\");\n                    }\n                } else {\n                    console.log(\"AssetLoader:: 'physics' json structure is malformed.\");\n                }\n            }\n        } else {\n            console.log(\"AssetLoader:: 'physics' json structure is malformed.\");\n        }\n    }\n\n    // -------- script -------- //\n\n    loadScript(json) {\n        let key;\n        let i;\n        let value;\n        let url;\n        if (typeof json === \"string\") {\n            this.game.load.script(json);\n        }\n        else if (Array.isArray(json)) {\n            for (i = 0; i < json.length; i++) {\n                if (typeof json[i] === \"string\") {\n                    this.game.load.script(json[i]);\n                } else {\n                    console.log(\"AssetLoader:: script keys must be of type 'string'.\");\n                }\n            }\n        }\n        else if (AssetLoader.isHashMap(json)) {\n            for (key in json) {\n                value = json[key];\n                if (typeof value === \"string\") {\n                    this.game.load.script(key, value);\n                }\n                else if (AssetLoader.isHashMap(value)) {\n                    url = (value.hasOwnProperty(\"url\")) ? value[\"url\"] : key + \".js\";\n                    if (typeof url === \"string\") {\n                        this.game.load.script(key, url);\n                    } else {\n                        console.log(\"AssetLoader:: (key: \" + key + \") script 'url' must be of type 'string'.\");\n                    }\n                } else {\n                    console.log(\"AssetLoader:: 'script' json structure is malformed.\");\n                }\n            }\n        } else {\n            console.log(\"AssetLoader:: 'script' json structure is malformed.\");\n        }\n    }\n\n    // -------- shader -------- //\n\n    loadShader(json) {\n        let key;\n        let value;\n        let i;\n        let url;\n        let overwrite;\n        if (typeof json === \"string\") {\n            this.game.load.shader(json);\n        }\n        else if (Array.isArray(json)) {\n            for (i = 0; i < json.length; i++) {\n                if (typeof json[i] === \"string\") {\n                    this.game.load.shader(json[i]);\n                } else {\n                    console.log(\"AssetLoader:: shader keys must be of type 'string'.\");\n                }\n            }\n        }\n        else if (AssetLoader.isHashMap(json)) {\n            for (key in json) {\n                value = json[key];\n                if (typeof value === \"string\") {\n                    this.game.load.shader(key, value);\n                }\n                else if (AssetLoader.isHashMap(value)) {\n                    url = (value.hasOwnProperty(\"url\")) ? value[\"url\"] : key + \".frag\";\n                    if (typeof url === \"string\") {\n                        overwrite = (value.hasOwnProperty(\"overwrite\")) ? value[\"overwrite\"] : false;\n                        if (typeof overwrite === \"boolean\") {\n                            this.game.load.shader(key, url, overwrite);\n                        } else {\n                            console.log(\"AssetLoader:: (key: \" + key + \") shader 'overwrite' must be of type 'boolean'.\");\n                        }\n                    } else {\n                        console.log(\"AssetLoader:: (key: \" + key + \") shader 'url' must be of type 'string'.\");\n                    }\n                } else {\n                    console.log(\"AssetLoader:: 'shader' json structure is malformed.\");\n                }\n            }\n        } else {\n            console.log(\"AssetLoader:: 'shader' json structure is malformed.\");\n        }\n    }\n\n    // -------- spritesheet -------- //\n\n    loadSpritesheet(json) {\n        let key;\n        let value;\n        let url;\n        let frameWidth;\n        let frameHeight;\n        let frameMax;\n        let margin;\n        let spacing;\n        if (AssetLoader.isHashMap(json)) {\n            for (key in json) {\n                value = json[key];\n                url = (value.hasOwnProperty(\"url\")) ? value[\"url\"] : null;\n                if (typeof url === \"string\") {\n                    frameWidth = (value.hasOwnProperty(\"frameWidth\")) ? value[\"frameWidth\"] : null;\n                    if (typeof frameWidth === \"number\") {\n                        frameHeight = (value.hasOwnProperty(\"frameHeight\")) ? value[\"frameHeight\"] : null;\n                        if (typeof frameHeight === \"number\") {\n                            frameMax = (value.hasOwnProperty(\"frameMax\")) ? value[\"frameMax\"] : -1;\n                            margin = (value.hasOwnProperty(\"margin\")) ? value[\"margin\"] : 0;\n                            spacing = (value.hasOwnProperty(\"spacing\")) ? value[\"spacing\"] : 0;\n                            if (typeof frameMax === \"number\" && typeof margin === \"number\" && typeof spacing === \"number\") {\n                                this.game.load.spritesheet(key, url, frameWidth, frameHeight, frameMax, margin, spacing);\n                            } else {\n                                console.log(\"AssetLoader:: (key: \" + key + \") spritesheet 'frameMax', 'margin', and 'spacing' must be of type 'number'\");\n                            }\n                        } else {\n                            console.log(\"AssetLoader:: (key: \" + key + \") spritesheets must have a 'frameHeight' defined and be of type 'number'\");\n                        }\n                    } else {\n                        console.log(\"AssetLoader:: (key: \" + key + \") spritesheets must have a 'frameWidth' defined and be of type 'number'\");\n                    }\n                } else {\n                    console.log(\"AssetLoader:: (key: \" + key + \") spritesheets must have a 'url' defined and of type 'string'\");\n                }\n            }\n        } else {\n            console.log(\"AssetLoader:: 'spritesheet' json structure is malformed.\");\n        }\n    }\n\n    // -------- text -------- //\n\n    loadText(json) {\n        let key;\n        let value;\n        let i;\n        let url;\n        let overwrite;\n        if (typeof json === \"string\") {\n            this.game.load.text(json);\n        }\n        else if (Array.isArray(json)) {\n            for (i = 0; i < json.length; i++) {\n                if (typeof json[i] === \"string\") {\n                    this.game.load.text(json[i]);\n                } else {\n                    console.log(\"AssetLoader:: text keys must be of type 'string'.\");\n                }\n            }\n        }\n        else if (AssetLoader.isHashMap(json)) {\n            for (key in json) {\n                value = json[key];\n                if (typeof value === \"string\") {\n                    this.game.load.text(key, value);\n                }\n                else if (AssetLoader.isHashMap(value)) {\n                    url = (value.hasOwnProperty(\"url\")) ? value[\"url\"] : key + \".txt\";\n                    if (typeof url === \"string\") {\n                        overwrite = (value.hasOwnProperty(\"overwrite\")) ? value[\"overwrite\"] : false;\n                        if (typeof overwrite === \"boolean\") {\n                            this.game.load.text(key, url, overwrite);\n                        } else {\n                            console.log(\"AssetLoader:: (key: \" + key + \") text 'overwrite' must be of type 'boolean'.\");\n                        }\n                    } else {\n                        console.log(\"AssetLoader:: (key: \" + key + \") text 'url' must be of type 'string'.\");\n                    }\n                } else {\n                    console.log(\"AssetLoader:: 'text' json structure is malformed.\");\n                }\n            }\n        } else {\n            console.log(\"AssetLoader:: 'text' json structure is malformed.\");\n        }\n    }\n\n    // -------- tilemap -------- //\n\n    loadTilemap(json) {\n        let key;\n        let i;\n        let value;\n        let url;\n        let data;\n        let format;\n        if (typeof json === \"string\") {\n            this.game.load.tilemap(json);\n        }\n        else if (Array.isArray(json)) {\n            for (i = 0; i < json.length; i++) {\n                if (typeof json[i] === \"string\") {\n                    this.game.load.tilemap(json[i]);\n                } else {\n                    console.log(\"AssetLoader:: tilemap keys must be of type 'string'.\");\n                }\n            }\n        }\n        else if (AssetLoader.isHashMap(json)) {\n            for (key in json) {\n                value = json[key];\n                if (typeof value === \"string\") {\n                    this.game.load.tilemap(key, value);\n                }\n                else if (AssetLoader.isHashMap(value)) {\n                    url = (value.hasOwnProperty(\"url\")) ? value[\"url\"] : key + \".csv\";\n                    if (typeof url === \"string\") {\n                        data = (value.hasOwnProperty(\"data\")) ? value[\"data\"] : null;\n                        if (data !== null && !AssetLoader.isHashMap(data)) {\n                            console.log(\"AssetLoader:: (key: \" + key + \") tilemap 'data' must be of type 'object'.\");\n                        } else {\n                            format = (value.hasOwnProperty(\"format\")) ? value[\"format\"] : Phaser.Tilemap.CSV;\n                            if (format === Phaser.Tilemap.CSV || format === Phaser.Tilemap.TILED_JSON) {\n                                this.game.load.tilemap(key, url, data, format);\n                            } else {\n                                console.log(\"AssetLoader:: (key: \" + key + \") tilemap 'format' must be Phaser.Tilemap.CSV (0) or Phaser.Tilemap.TILED_JSON (1).\");\n                            }\n                        }\n                    } else {\n                        console.log(\"AssetLoader:: tilemap 'url' must be of type 'string'.\");\n                    }\n                } else {\n                    console.log(\"AssetLoader:: 'tilemap' json structure is malformed.\");\n                }\n            }\n        } else {\n            console.log(\"AssetLoader:: 'tilemap' json structure is malformed.\");\n        }\n    }\n\n    // -------- video -------- //\n\n    loadVideo(json) {\n        let key;\n        let value;\n        let urls;\n        let loadEvent;\n        let asBlob;\n        if (AssetLoader.isHashMap(json)) {\n            for (key in json) {\n                value = json[key];\n                if ((typeof value === \"string\" && value !== \"\") || (Array.isArray(value) && value.length > 0)) {\n                    this.game.load.video(key, value);\n                }\n                else if (AssetLoader.isHashMap(value) && Object.keys(value).length > 0) {\n                    urls = (value.hasOwnProperty(\"urls\")) ? value[\"urls\"] : null;\n                    if (urls !== null) {\n                        loadEvent = (value.hasOwnProperty(\"loadEvent\")) ? value[\"loadEvent\"] : \"canplaythrough\";\n                        if (loadEvent === \"canplaythrough\" || loadEvent === \"canplay\" || loadEvent === \"loadeddata\") {\n                            asBlob = (value.hasOwnProperty(\"asBlob\")) ? value[\"asBlob\"] : false;\n                            if (typeof asBlob === \"boolean\") {\n                                this.game.load.video(key, urls, loadEvent, asBlob);\n                            } else {\n                                console.log(\"AssetLoader:: video 'asBlob' must be of type 'boolean'.\");\n                            }\n                        } else {\n                            console.log(\"AssetLoader:: video 'loadEvent' must be 'canplaythrough', 'canplay', or 'loadeddata'.\");\n                        }\n                    } else {\n                        console.log(\"AssetLoader:: video 'urls' must be defined.\");\n                    }\n                } else {\n                    console.log(\"AssetLoader:: 'video' json structure is malformed.\");\n                }\n            }\n        } else {\n            console.log(\"AssetLoader:: 'video' json structure is malformed.\");\n        }\n    }\n\n    // -------- xml -------- //\n\n    loadXML(json) {\n        let key;\n        let value;\n        let i;\n        let url;\n        let overwrite;\n        if (typeof json === \"string\") {\n            this.game.load.xml(json);\n        }\n        else if (Array.isArray(json)) {\n            for (i = 0; i < json.length; i++) {\n                if (typeof json[i] === \"string\") {\n                    this.game.load.xml(json[i]);\n                } else {\n                    console.log(\"AssetLoader:: xml keys must be of type 'string'.\");\n                }\n            }\n        }\n        else if (AssetLoader.isHashMap(json)) {\n            for (key in json) {\n                value = json[key];\n                if (typeof value === \"string\") {\n                    this.game.load.xml(key, value);\n                }\n                else if (AssetLoader.isHashMap(value)) {\n                    url = (value.hasOwnProperty(\"url\")) ? value[\"url\"] : key + \".xml\";\n                    if (typeof url === \"string\") {\n                        overwrite = (value.hasOwnProperty(\"overwrite\")) ? value[\"overwrite\"] : false;\n                        if (typeof overwrite === \"boolean\") {\n                            this.game.load.xml(key, url, overwrite);\n                        } else {\n                            console.log(\"AssetLoader:: (key: \" + key + \") xml 'overwrite' must be of type 'boolean'.\");\n                        }\n                    } else {\n                        console.log(\"AssetLoader:: (key: \" + key + \") xml 'url' must be of type 'string'.\");\n                    }\n                } else {\n                    console.log(\"AssetLoader:: 'xml' json structure is malformed.\");\n                }\n            }\n        } else {\n            console.log(\"AssetLoader:: 'xml' json structure is malformed.\");\n        }\n    }\n\n    static isHashMap(json) {\n        //todo check is type object?\n        return typeof json !== \"boolean\" && typeof json !== \"number\" && typeof json !== \"string\" && !Array.isArray(json) && typeof json !== \"undefined\" && json !== null;\n    }\n}\n\nexport default AssetLoader;\n\n\n// WEBPACK FOOTER //\n// ./src/AssetLoader.js"],"sourceRoot":""}