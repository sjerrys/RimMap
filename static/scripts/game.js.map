{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/index.js",
    "src/states/Boot.js",
    "src/states/DynamicLoad.js",
    "src/states/GameState.js",
    "src/states/Preload.js",
    "src/states/PreloadAssets.js",
    "src/utils/Utils.js"
  ],
  "names": [],
  "mappings": "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aAAA,AAAK,AAAI;AACP;mBAAA,AAAS,AACT;AACF;aAAA,AAAK,AAAI;AACP;mBAAA,AAAS,AACT;AACF;aAAA,AAAK,AAAI;AACP;mBAAA,AAAS,AACT;AACF;aAAA,AAAK,AAAI;AACP;mBAAA,AAAS,AACT;AACF;aAAA,AAAK,AAAI;AACP;mBAAA,AAAS,AACT;AACF;aAAA,AAAK,AAAI;AACP;mBAAA,AAAS,AACT;AACF;aAAA,AAAK,AAAI;AACP;mBAAA,AAAS,AACT;AACF;aAAA,AAAK,AAAI;AACP;mBAAA,AAAS,AACT;AACF;aAAA,AAAK,AAAI;AACP;mBAAA,AAAS,AACT;AACF;aAAA,AAAK,AAAI;AACP;mBAAA,AAAS,AACT;AACF;aAAA,AAAK,AAAI;AACP;mBAAA,AAAS,AACT;AACF;aAAA,AAAK,AAAI;AACP;mBAAA,AAAS,AACT;AACF;aAAA,AAAK,AAAI;AACP;mBAAA,AAAS,AACT;AACF;aAAA,AAAK,AAAI;AACP;mBAAA,AAAS,AACT;AACF;aAAA,AAAK,AAAI;AACP;mBAAA,AAAS,AACT;AACF;aAAA,AAAK,AAAI;AACP;mBAAA,AAAS,AACT;AACF;aAAA,AAAK,AAAI;AACP;mBAAA,AAAS,AACT;AACF;aAAA,AAAK,AAAI;AACP;mBAAA,AAAS,AACT;AACF;aAAA,AAAK,AAAI;AACP;mBAAA,AAAS,AACT;AACF;aAAA,AAAK,AAAI;AACP;mBAAA,AAAS,AACT;AACF;aAAA,AAAK,AAAI;AACP;mBAAA,AAAS,AACT;AACF;aAAA,AAAK,AAAI;AACP;mBAAA,AAAS,AACT;AACF;aAAA,AAAK,AAAI;AACP;mBAAA,AAAS,AACT;AACF;aAAA,AAAK,AAAI;AACP;mBAAA,AAAS,AACT;AACF;aAAA,AAAK,AAAI;AACP;mBAAA,AAAS,AACT;AACF;aAAA,AAAK,AAAI;AACP;mBAAA,AAAS,AACT;AACF;aAAA,AAAK,AAAI;AACP;mBAAA,AAAS,AACT;AACF;aAAA,AAAK,AAAI;AACP;mBAAA,AAAS,AACT;AACF;aAAA,AAAK,AAAI;AACP;mBAAA,AAAS,AACT;AACF;aAAA,AAAK,A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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "import Boot from 'states/Boot';\nimport Preload from 'states/Preload';\nimport DynamicLoad from 'states/DynamicLoad';\nimport PreloadAssets from 'states/PreloadAssets';\nimport GameState from 'states/GameState';\n\nclass Game extends Phaser.Game {\n\n\tconstructor() {\n\t\twindow.PhaserGlobal = { disableAudio: true };\n\t\t// Phaser.WEBGL_MULTI\n\t\tsuper(1024, 720, Phaser.WEBGL_MULTI, 'window', null, false, true);\n\n\t\tthis.state.add('Boot', Boot, false);\n\t\tthis.state.add('Preload', Preload, false);\n\t\tthis.state.add('DynamicLoad', DynamicLoad, false);\n\t\tthis.state.add('PreloadAssets', PreloadAssets, false);\n\n\t\tthis.state.add('GameState', GameState, false);\n\n\t\tthis.state.start('Boot');\n\t}\n}\n\nnew Game();\n",
    "class Boot extends Phaser.State {\n\n\tpreload() {\n\t\tthis.load.image('preloadBar', 'assets/loader.png');\n\t\tthis.load.image('preloadBg', 'assets/loaderBg.png');\n\n\t\tthis.load.json(\"vanillaAssets\", \"assets/vanillaAssets.json\");\n\n\t\tthis.load.json(\"modAssets\", \"assets/modAssets.json\"); //TODO ADD VERSIONS?\n\n\n\t\tthis.load.script('assetLoader', 'assets/phaser-asset-loader-0.0.1.min.js');\n\n\n\t}\n\tcreate() {\n\t\t//this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;\n\t\tthis.game.stage.backgroundColor = '#14171a';\n\n\t\tthis.game.state.start(\"Preload\");\n\t}\n}\n\nexport default Boot;\n",
    "import Utils from 'utils/Utils';\n\nclass DynamicLoad extends Phaser.State {\n\n  create() {\n    this.worldSize = {\n      x: 0,\n      y: 0,\n      z: 0\n    };\n    this.toLoadJson = {\n      \"image\": {}\n    };\n    this.loadingDelta = 0;\n    this.game.hd = false;\n    this.utils = new Utils(this.game);\n  }\n\n  loadWorld(json) {\n    //SETUP LOADING\n    let rawSizes = null;\n\n    //IF MANY MAPS\n    if (json.savegame.game.maps.li.length) {\n      json.savegame.game.maps.li = json.savegame.game.maps.li[0];\n    }\n\n    rawSizes = json.savegame.game.maps.li.mapInfo.size;\n\n    let sizes = this.utils.getPosition(rawSizes);\n\n    this.worldSize.x = sizes[0];\n    this.worldSize.y = sizes[2];\n    this.worldSize.z = sizes[1];\n\n    let allAssets = null;\n    let thingList = json.savegame.game.maps.li.things.thing;\n    let furnitureList = [];\n    //MAKE FURNITURE LIST\n    for(let i = 0 ; i < json.savegame.game.maps.li.things.thing.length ; i++){\n\n      if(json.savegame.game.maps.li.things.thing[i].def == \"MinifiedThing\" ||\n      json.savegame.game.maps.li.things.thing[i].def == \"MinifiedFurniture\" ||\n      json.savegame.game.maps.li.things.thing[i].def == \"MinifiedSculpture\"){\n      furnitureList.push(json.savegame.game.maps.li.things.thing[i].innerContainer.innerList.li);\n      }\n    }\n\n    let totalAssets = thingList.concat(furnitureList);\n    const toLoadAssets = this.getUniqueStuff(totalAssets);\n\n\n    let vanillaAssets = this.game.cache.getJSON(\"vanillaAssets\"); //Add more\n    let modAssets = this.game.cache.getJSON(\"modAssets\"); //Add more\n\n\n    for (let i = 0; i < toLoadAssets.length; i++) {\n\n      let filterName = this.utils.getStuffName(toLoadAssets[i]);\n        //Loop through all the unique assets and add to array\n\n        if (vanillaAssets.image[filterName] !== undefined) {\n          this.toLoadJson.image[filterName] = vanillaAssets.path + vanillaAssets.image[filterName];\n        } else if(modAssets.image[filterName] !== undefined){\n          this.toLoadJson.image[filterName] = modAssets.path + modAssets.image[filterName];\n        }\n    }\n    this.startMap(json);\n  }\n\n  getUniqueStuff(allStuff) {\n    return [...new Set(allStuff.map(stuff => stuff.def))];\n  }\n\n  showHD(){\n    this.game.hd = true;\n  }\n  hideHD(){\n    this.game.hd = false;\n  }\n  startMap(json) {\n    this.game.state.start('PreloadAssets', true, false, this.toLoadJson, json);\n  }\n\n}\nexport default DynamicLoad;\n",
    "import Utils from 'utils/Utils';\n\nclass GameState extends Phaser.State {\n  create() {\n\n    this.json = this.game.json;\n\n    this.fastRender = true;\n\n    this.center = {\n      x: this.game.world.centerX,\n      y: this.game.world.centerY\n    }\n\n    this.SCREENWIDTH = this.game.width;\n    this.SCREENHEIGHT = this.game.height;\n\n    this.MOUSEBOUNDS = 25;\n\n    this.worldSize = {\n      x: 0,\n      y: 0,\n      z: 0\n    };\n    this.exp = false;\n    this.utils = new Utils(this.game);\n\n    if (this.game.hd == false) {\n      this.zoomLevel = 0.5;\n      this.zoomRate = 0.5;\n      this.minZoom = 0.5;\n      this.maxZoom = 2;\n    } else {\n      this.zoomLevel = 1;\n      this.zoomRate = 0.5;\n      this.minZoom = 1;\n      this.maxZoom = 2.5;\n    }\n\n    this.mapInfo = { //RAW MAP DATA (arrays)\n      \"height\": 0,\n      \"width\": 0,\n      \"name\": null,\n      \"colonyName\" : \"\",\n      \"gameVersion\" : \"\",\n      \"topTerrainGrid\": [],\n      \"underTerrainGrid\": [],\n      \"resourceRefGrid\": [],\n      \"deepResourceGrid\": [],\n      \"deepResourceCount\": [],\n      \"planningGrid\" : [],\n      \"roofGrid\": [],\n      \"stuffGrid\": [],\n      \"stuffRefGrid\": []\n    };\n\n\n    this.cursors =\n      this.currentTile =\n      this.topTerrainGridLayer = //TILEMAPS/BITMAP IMAGES\n      this.underTerrainGridLayer =\n      this.resourceGridLayer =\n      this.deepResourceGridLayer =\n      this.rocksGridLayer =\n      this.snowGridLayer =\n      this.rocksLayer =\n      this.mountainsLayer =\n      this.stuffLayer =\n      this.resourceLayer =\n      this.deepResourceLayer =\n      this.planningLayer =\n      this.roofLayer =\n      this.centerMarker =\n      this.currentBounds =\n      this.marker = null;\n\n    this.rockGrid = [];\n    this.game.forceSingleUpdate = false;\n    this.game.stage.backgroundColor = '#1f271d';\n\n    this.game.stage.smoothed = false\n\n    this.game.multiTexture = true;\n\n    this.loading = false;\n    this.loadingFinished = false;\n    this.LOADDELAY = 10; //A small tick to allow the UI to update the loading state\n    this.loadingDeltaWait = this.LOADDELAY;\n    this.loadingDelta = 0;\n\n    this.clickDepth = 0;\n    this.clickIndex = 0;\n    this.oldStuffTile = null;\n\n    this.worldScale = this.minZoom;\n    this.distance = 0;\n    this.olddistance = 0;\n    this.groupScale = 0;\n    this.distancedelta = 0;\n    this.easing = 1; //0.1;\n    this.mapSizeCurrent;\n    this.mapSizeMax;\n    this.prevScale = {};\n    this.nextScale = {};\n    this.zoompoint = {\n      x: 0,\n      y: 0\n    };\n    this.scrollZoomRate = 1024 * this.utils.SCALESIZE;\n    this.scrolling = true;\n    this.padding = 2;\n  }\n\n  update() {\n\n    if (this.loadingDelta == 0) {\n\n      this.terrainGridLayer = this.game.add.group();\n\n      console.log(this.loadingDelta);\n      this.buildMapInfo(this.json);\n\n      let url = null;\n      if (window.document.referrer) {\n        url = new URL(window.document.referrer);\n      } else {\n        url = new URL(document.location);\n      }\n      if (url != null) {\n        params = new URLSearchParams(url.search.substring(1))\n        let urlMapId = params.get(\"test\")\n        if (urlMapId !== null) {\n          this.exp = true;\n        }\n      }\n\n      if (this.exp) {\n        this.renderTerrainTileMap();\n      } else {\n        this.renderTerrain();\n      }\n\n    }\n    if (this.loadingDelta > 0 && this.loadingDeltaWait > 0 && this.loadingFinished == false) {\n      if (this.loadingSprite) {\n        this.loadingSprite.scale.setTo(0.5 * this.loadingDelta);\n      }\n      this.loadingDeltaWait--;\n    } else {\n      this.loading = true;\n    }\n\n    if (this.loading && this.loadingFinished == false) {\n      if (this.loadingDelta == 1) {\n\n        console.log(this.loadingDelta);\n\n        this.rocksGridLayer = this.game.add.group();\n        this.mountainsLayer = this.game.add.group();\n        this.stuffGridLayer = this.game.add.group();\n        this.resourceGridLayer = this.game.add.group();\n        this.deepResourceGridLayer = this.game.add.group();\n        this.planningLayer = this.game.add.group();\n\n        for (let i = 0; i < this.worldSize.x; i++) {\n          if (!this.rockGrid[i]) {\n            this.rockGrid[i] = [];\n          }\n          for (let j = 0; j < this.worldSize.y; j++) {\n            this.rockGrid[i][j] = 0;\n          }\n        }\n\n        //RENDER TILEMAP\n        this.renderStuff();\n        this.renderWalls();\n        this.renderMountain();\n\n        //this.renderPlanTileMap();\n        if (!this.exp) {\n          this.terrainLayer = this.renderBitmap(this.terrainGridLayer);\n        }\n        this.markerInit();\n\n        this.loadingDelta = 2;\n        this.loadingDeltaWait = this.LOADDELAY;\n        this.loading = false;\n\n      } else if (this.loadingDelta == 2) {\n        console.log(this.loadingDelta);\n\n        this.stuffLayer = this.renderBitmap(this.stuffGridLayer);\n\n        this.loadingDelta = 3;\n        this.loadingDeltaWait = this.LOADDELAY;\n        this.loading = false;\n\n      } else if (this.loadingDelta == 3) {\n        console.log(this.loadingDelta);\n\n        //for scrolling\n        this.groupScale = this.stuffLayer.scale.x;\n\n        this.rocksGridLayer.add(this.mountainsLayer);\n\n        this.rocksLayer = this.renderBitmap(this.rocksGridLayer);\n\n        this.mountainsLayer.destroy();\n        this.loadingDelta = 4;\n        this.loadingDeltaWait = this.LOADDELAY;\n        this.loading = false;\n\n        this.scaleMap(this.groupScale);\n\n      } else if (this.loadingDelta == 4) {\n        console.log(this.loadingDelta);\n\n        this.mapSizeMax = this.mapInfo.width;\n        this.mapSizeCurrent = this.mapSizeMax;\n        this.worldScale = 1;\n\n        this.game.input.mouseWheel.callback = (event) => {\n          let wheelDelt = this.game.input.mouseWheel.delta;\n\n          if (wheelDelt < 0) {\n\n            if (this.mapSizeCurrent > this.mapSizeMax) {\n              this.mapSizeCurrent -= this.scrollZoomRate;\n            } else {\n              this.mapSizeCurrent -= this.scrollZoomRate;\n              this.mapSizeCurrent = Phaser.Math.clamp(this.mapSizeCurrent, this.SCREENWIDTH * 2, this.mapSizeMax);\n            }\n          } else {\n            if (this.mapSizeCurrent < this.mapSizeMax) {\n              this.mapSizeCurrent += this.scrollZoomRate;\n              this.mapSizeCurrent = Phaser.Math.clamp(this.mapSizeCurrent, this.SCREENWIDTH * 2, this.mapSizeMax);\n            } else if (this.mapSizeCurrent < this.mapSizeMax * 2) {\n              this.mapSizeCurrent += this.scrollZoomRate;\n            }\n          }\n\n          this.worldScale = (this.mapSizeCurrent / this.mapSizeMax);\n\n          this.rescalefactorx = this.mapInfo.width / (this.mapInfo.width * this.groupScale); // multiply by rescalefactor to get original world value\n          this.rescalefactory = this.mapInfo.height / (this.mapInfo.height * this.groupScale);\n\n          this.prevScale.x = this.groupScale;\n          this.prevScale.y = this.groupScale;\n\n          this.nextScale.x = this.prevScale.x + (this.worldScale - this.groupScale);\n          this.nextScale.y = this.prevScale.y + (this.worldScale - this.groupScale);\n\n          let xAdjust = (this.zoompoint.x - this.game.camera.x) * (this.nextScale.x - this.prevScale.x);\n          let yAdjust = (this.zoompoint.y - this.game.camera.y) * (this.nextScale.y - this.prevScale.y);\n\n          //Only move screen if we're not the same scale\n          if (this.prevScale.x != this.nextScale.x || this.prevScale.y != this.nextScale.y) {\n\n            let scaleAdjustX = this.nextScale.x / this.prevScale.x;\n            let scaleAdjustY = this.nextScale.y / this.prevScale.y;\n            let focusX = (this.game.camera.x * scaleAdjustX) + xAdjust * (this.rescalefactorx);\n            let focusY = (this.game.camera.y * scaleAdjustY) + yAdjust * (this.rescalefactory);\n\n            this.game.camera.x = focusX;\n            this.game.camera.y = focusY;\n          }\n          //now actually scale the stage\n          this.groupScale += (this.worldScale - this.groupScale); //easing\n          this.scaleMap(this.groupScale);\n        };\n\n        this.currentBounds = new Phaser.Rectangle(-this.mapInfo.width * 2, -this.mapInfo.height * 2, this.mapInfo.width * 4, this.mapInfo.height * 4);\n        this.game.camera.bounds = null;\n        this.game.camera.focusOnXY(this.mapInfo.width / 2, this.mapInfo.height / 2);\n\n        this.cursors = this.game.input.keyboard.createCursorKeys();\n        this.plusKey = this.game.input.keyboard.addKey(Phaser.Keyboard.EQUALS).onDown.add(function() {\n          if ((this.zoomLevel - this.zoomRate) >= this.minZoom) {\n            this.zoomMap(this.zoomLevel - this.zoomRate);\n          }\n        }, this);\n        this.minusKey = this.game.input.keyboard.addKey(Phaser.Keyboard.UNDERSCORE).onDown.add(function() {\n          if ((this.zoomLevel + this.zoomRate) < this.maxZoom) {\n            this.zoomMap(this.zoomLevel + this.zoomRate);\n          }\n        }, this);\n\n        this.game.input.onDown.add(this.getTileProperties, this);\n\n        this.loadingDelta = 5;\n        this.loading = false;\n        this.loadingDeltaWait = this.LOADDELAY;\n        this.loadingFinished = true;\n      }\n    }\n    if (this.loadingFinished == true && this.loadingDelta == 5) {\n\n      // wheelzoom\n      if (this.isMouseOut()) {\n\n        let scrollRate = this.utils.TILESIZE / this.zoomLevel;\n\n        if (this.game.input.mousePointer.x > this.SCREENWIDTH - this.MOUSEBOUNDS) {\n          this.game.camera.x += scrollRate;\n        }\n        if (this.game.input.mousePointer.x < 0 + this.MOUSEBOUNDS) {\n          this.game.camera.x -= scrollRate;\n        }\n        if (this.game.input.mousePointer.y > this.SCREENHEIGHT - this.MOUSEBOUNDS) {\n          this.game.camera.y += scrollRate;\n        }\n        if (this.game.input.mousePointer.y < 0 + this.MOUSEBOUNDS) {\n          this.game.camera.y -= scrollRate;\n        }\n        if (this.cursors.up.isDown) {\n          this.game.camera.y -= scrollRate;\n        } else if (this.cursors.down.isDown) {\n          this.game.camera.y += scrollRate;\n        }\n        if (this.cursors.left.isDown) {\n          this.game.camera.x -= scrollRate;\n        } else if (this.cursors.right.isDown) {\n          this.game.camera.x += scrollRate;\n        }\n      }\n      // move camera / pan\n      if (this.game.input.activePointer.isDown && !this.game.input.pointer2.isDown) {\n        if (this.oldcamera) { // if moving the world always continue from the last position\n          if (this.isMouseOut()) {\n            this.game.camera.x += this.oldcamera.x - this.game.input.activePointer.position.x;\n            this.game.camera.y += this.oldcamera.y - this.game.input.activePointer.position.y;\n          }\n        }\n        this.oldcamera = this.game.input.activePointer.position.clone();\n      } else {\n        if (this.isMouseOut()) {\n\n          this.zoompoint.x = this.game.input.mousePointer.worldX;\n          this.zoompoint.y = this.game.input.mousePointer.worldY;\n\n          if (this.topTerrainGridLayer) {\n            this.marker.x = this.topTerrainGridLayer.getTileX(this.game.input.activePointer.worldX * this.zoomLevel) * this.utils.TILESIZE / this.zoomLevel;\n            this.marker.y = this.topTerrainGridLayer.getTileY(this.game.input.activePointer.worldY * this.zoomLevel) * this.utils.TILESIZE / this.zoomLevel;\n          } else {\n\n            let x = Phaser.Math.snapTo(this.game.input.activePointer.worldX-((this.utils.TILESIZE/2)/ this.zoomLevel),this.utils.TILESIZE / this.zoomLevel);\n            let y = Phaser.Math.snapTo(this.game.input.activePointer.worldY-((this.utils.TILESIZE/2)/ this.zoomLevel),this.utils.TILESIZE / this.zoomLevel);\n\n            this.marker.x  = x;\n            this.marker.y  = y;\n          }\n        }\n        this.oldcamera = null;\n      }\n      this.scrolling = false;\n    }\n  }\n\n  render() {\n    this.game.debug.text(this.game.time.fps || '--', 20, 50, \"#ffffff\");\n  }\n\n  buildMapInfo(json) {\n\n    //SETUP LOADING\n    let rawSizes = null;\n    if (json.savegame.game.maps.li.length) {\n      json.savegame.game.maps.li = json.savegame.game.maps.li[0];\n    }\n    rawSizes = json.savegame.game.maps.li.mapInfo.size;\n\n    let sizes = this.utils.getPosition(rawSizes);\n\n    this.worldSize.x = sizes[0];\n    this.worldSize.y = sizes[2];\n    this.worldSize.z = sizes[1];\n\n    this.utils.worldSize = this.worldSize;\n\n    this.loadingDelta = 1;\n\n    this.mapInfo.width = this.utils.TILESIZE * this.worldSize.x;\n    this.mapInfo.height = this.utils.TILESIZE * this.worldSize.y;\n\n    this.mapInfo.gameVersion = json.savegame.meta.gameVersion;\n\n    //GET COLONY NAME\n    for(let i = 0; i < json.savegame.game.world.factionManager.allFactions.li.length ; i++){\n      if(json.savegame.game.world.factionManager.allFactions.li[i].def == \"PlayerColony\" ||\n         json.savegame.game.world.factionManager.allFactions.li[i].def == \"PlayerTribe\"){\n        this.mapInfo.colonyName = json.savegame.game.world.factionManager.allFactions.li[i].name;\n      }\n    }\n\n    this.mapInfo.topTerrainGrid = this.utils.decompress(json.savegame.game.maps.li.terrainGrid.topGridDeflate);\n    this.mapInfo.underTerrainGrid = this.utils.decompress(json.savegame.game.maps.li.terrainGrid.underGridDeflate);\n    //this.mapInfo.roofTerrainGrid = this.utils.decompress(json.savegame.game.maps.li.roofGrid);\n    this.mapInfo.resourceRefGrid = this.utils.decompress(json.savegame.game.maps.li.compressedThingMapDeflate);\n\n    this.mapInfo.deepResourceGrid = this.utils.decompress(json.savegame.game.maps.li.deepResourceGrid.defGridDeflate);\n    this.mapInfo.deepResourceCount = this.utils.decompress(json.savegame.game.maps.li.deepResourceGrid.countGridDeflate);\n\n    this.mapInfo.planningGrid = json.savegame.game.maps.li.designationManager.allDesignations.li;\n\n    this.mapInfo.topTerrainGrid = this.utils.mapTextures(this.mapInfo.topTerrainGrid, \"terrain\", this.mapInfo.underTerrainGrid);\n    this.mapInfo.stuffGrid = json.savegame.game.maps.li.things.thing;\n\n    console.log(json.savegame);\n\n    //this.temperatureCache.temperaturesDeflate\n    //this.mapInfo.snowGridLayer = this.utils.decompress(json.savegame.game.maps.li.snowGrid.depthGridDeflate);\n  }\n\n  renderBitmap(group, center) {\n\n    let outputGroup = this.game.add.group();\n    let groupPosX = 0;\n    let groupPosY = 0;\n    let renderOutput = null;\n    let bmd = null;\n\n    if (center) {\n      groupPosX = -this.mapInfo.width / 2;\n      groupPosY = this.mapInfo.height / 2;\n      group.pivot.x = -this.mapInfo.width / 2;\n      group.pivot.y = -this.mapInfo.height / 2;\n    } else {\n      groupPosX = 0;\n      groupPosY = this.mapInfo.height;\n      group.pivot.x = 0;\n      group.pivot.y = 0;\n    }\n\n    group.position.x = groupPosX;\n    group.position.y = groupPosY;\n\n    //This is the BitmapData we're going to be drawing to\n    bmd = this.game.add.bitmapData(this.mapInfo.width, this.mapInfo.height, false);\n    renderOutput = bmd.addToWorld(0,0, 0, 0, 0.5, 0.5);\n\n    this.game.stage.updateTransform();\n    bmd.baseTexture.resolution = 0.5;\n    bmd.disableTextureUpload = true;\n    bmd.drawGroup(group);\n    outputGroup.add(renderOutput);\n    groupPosY = this.mapInfo.height;\n    groupPosX = -this.mapInfo.width;\n    bmd = null;\n    group.destroy(true, false);\n\n    return outputGroup;\n  }\n\n  renderTerrain() {\n    let masterIndex = 0;\n    let terrainSprite = null;\n    for (let i = 0; i < this.worldSize.x; i++) {\n      for (let j = 0; j < this.worldSize.y; j++) {\n        terrainSprite = this.game.add.sprite((j * this.utils.TILESIZE), -((i + 1) * this.utils.TILESIZE), 'tileMap', this.mapInfo.topTerrainGrid[masterIndex]);\n        this.terrainGridLayer.add(terrainSprite);\n        masterIndex++;\n      }\n    }\n  }\n\n  renderTerrainTileMap() {\n    //Deprecated due to zoom in out being choppy\n    this.game.cache.addTilemap('dynamicMap', null, this.utils.makeCSV(this.mapInfo.topTerrainGrid), Phaser.Tilemap.CSV);\n    let tileMap = this.game.add.tilemap('dynamicMap', this.utils.TILESIZE, this.utils.TILESIZE);\n    tileMap.addTilesetImage('tiles', 'tiles', this.utils.TILESIZE, this.utils.TILESIZE);\n    //  0 is important\n    this.topTerrainGridLayer = tileMap.createLayer(0);\n    this.topTerrainGridLayer.renderSettings.enableScrollDelta = false;\n\n    this.topTerrainGridLayer.resizeWorld();\n  }\n  renderStuff() {\n\n    let thingPos = null;\n    let thingSprite = null;\n    let rockUnderSprite = null;\n    let filterName = null;\n\n    for (let i = this.mapInfo.stuffGrid.length - 1; i > 0; i--) {\n\n      filterName = this.utils.getStuffName(this.mapInfo.stuffGrid[i].def);\n      thingPos = this.utils.getPosition(this.mapInfo.stuffGrid[i].pos);\n\n      //First check if the stuff is a damged rock if so add it to rocks and discard\n      //Second check if its not a wall, sandbag, animal or anything undesiraable\n      if (this.utils.isResource(this.mapInfo.stuffGrid[i].def)) {\n        this.rockGrid[thingPos[2]][thingPos[0]] = 1;\n        let mappedResource = 0;\n        switch (this.mapInfo.stuffGrid[i].def) {\n          case \"Limestone\":\n            mappedResource = 138;\n            break;\n          case \"Granite\":\n            mappedResource = 84;\n            break;\n          case \"Marble\":\n            mappedResource = 212;\n            break;\n          case \"Sandstone\":\n            mappedResource = 67;\n            break;\n          case \"Slate\":\n            mappedResource = 197;\n            break;\n          case \"MineableComponents\":\n          case \"MineableComponentsIndustrial\":\n            mappedResource = 56;\n            break;\n          case \"MineableGold\":\n            mappedResource = 229;\n            break;\n          case \"MineableUranium\":\n            mappedResource = 103;\n            break;\n          case \"MineableSteel\":\n            mappedResource = 156;\n            break;\n          case \"MineableJade\":\n            mappedResource = 127;\n            break;\n          case \"MineableSilver\":\n            mappedResource = 194;\n            break;\n          case \"MineablePlasteel\":\n            mappedResource = 17;\n            break;\n        }\n\n        this.mapInfo.resourceRefGrid[(thingPos[2] * this.worldSize.y) + thingPos[0]] = mappedResource\n\n      } else if (\n        this.mapInfo.stuffGrid[i].def != \"Sandbags\" &&\n        !this.utils.isWall(this.mapInfo.stuffGrid[i].def) &&\n        this.utils.isAllowedStuff(filterName) &&\n        this.utils.isAnimal(filterName)) {\n\n        thingSprite = this.game.add.sprite(\n          (thingPos[0] * this.utils.TILESIZE), -(thingPos[2] * this.utils.TILESIZE),\n          filterName\n        );\n\n        if (this.mapInfo.stuffGrid[i].def != \"WoodLog\" && //Dont color sprites that are pre-colored\n          this.mapInfo.stuffGrid[i].def != \"Steel\" &&\n          this.mapInfo.stuffGrid[i].def != \"Plasteel\" &&\n          this.mapInfo.stuffGrid[i].def != \"Jade\" &&\n          this.mapInfo.stuffGrid[i].def != \"Silver\" &&\n          this.mapInfo.stuffGrid[i].def != \"Gold\" &&\n          this.mapInfo.stuffGrid[i].def != \"Uranium\") {\n\n          thingSprite = this.utils.colorSprite(thingSprite, this.mapInfo.stuffGrid[i]);\n          //x_Meat does not change color depending on animal so just color it all\n          if (filterName == \"Meat\") {\n            thingSprite.tint = this.utils.MEAT;\n          }\n        }\n\n        //Rotate the thing correctly\n        thingSprite.scale.setTo(this.utils.SCALESIZE);\n\n        thingSprite = this.utils.thingAlign(thingSprite, this.mapInfo.stuffGrid[i]);\n        //IF MINIFIED\n        if(this.mapInfo.stuffGrid[i].def == \"MinifiedThing\" ||\n        this.mapInfo.stuffGrid[i].def == \"MinifiedFurniture\" ||\n        this.mapInfo.stuffGrid[i].def == \"MinifiedSculpture\"){\n\n          if(this.mapInfo.stuffGrid[i].innerContainer.innerList.li.def){\n            let innerThingName = this.utils.getStuffName(this.mapInfo.stuffGrid[i].innerContainer.innerList.li.def);\n\n            let innerThingSprite = this.game.add.sprite(\n              (thingPos[0] * this.utils.TILESIZE), -(thingPos[2] * this.utils.TILESIZE),\n              innerThingName\n            );\n\n\n            innerThingSprite.height = this.utils.TILESIZE;\n            innerThingSprite.width = this.utils.TILESIZE;\n\n            innerThingSprite = this.utils.colorSprite(innerThingSprite, this.mapInfo.stuffGrid[i].innerContainer.innerList.li);\n            //innerThingSprite.scale.setTo(this.utils.SCALESIZE);\n            innerThingSprite = this.utils.thingAlign(innerThingSprite, this.mapInfo.stuffGrid[i]);\n\n            this.stuffGridLayer.add(innerThingSprite);\n          }\n\n\n        }\n          //IF GROWTH\n        if (this.mapInfo.stuffGrid[i].growth) {\n          if (this.mapInfo.stuffGrid[i].growth <= 0.1) {\n            thingSprite.destroy();\n          } else {\n            thingSprite.scale.setTo(this.mapInfo.stuffGrid[i].growth * (this.utils.SCALESIZE));\n          }\n        }\n\n        if(this.mapInfo.stuffGrid[i].def == \"Human\"){\n          console.log(this.mapInfo.stuffGrid[i].faction);\n        }\n\n        if (thingSprite) {\n          this.stuffGridLayer.add(thingSprite);\n          if (this.mapInfo.stuffGrid[i].def == \"SteamGeyser\" ||\n            this.mapInfo.stuffGrid[i].def == \"Shelf\" ||\n            this.mapInfo.stuffGrid[i].def == \"PlantPot\" ||\n            this.mapInfo.stuffGrid[i].def == \"HydroponicsBasin\") {\n            this.stuffGridLayer.sendToBack(thingSprite);\n          }\n        }\n      } //printsprite\n    } //End for Loop\n  }\n\n  renderResourceTileMap() {\n\n    let masterIndex = 0;\n    let resourceSprite = null;\n    let resourceTint = null;\n    let resourceGraphic = null;\n\n    for (let i = 0; i < this.worldSize.x; i++) {\n      for (let j = 0; j < this.worldSize.y; j++) {\n        if (this.mapInfo.resourceRefGrid[masterIndex] > 0) {\n          resourceSprite = null;\n          resourceTint = null;\n          resourceGraphic = null;\n\n          switch (this.mapInfo.resourceRefGrid[masterIndex]) {\n            case 78: //Marble chunk\n              resourceGraphic = \"chunk\";\n              resourceTint = this.utils.MARBLE;\n              break;\n            case 119: //Limestone chunk\n              resourceGraphic = \"chunk\";\n              resourceTint = this.utils.LIMESTONE;\n              break;\n            case 252: //Granite chunk\n              resourceGraphic = \"chunk\";\n              resourceTint = this.utils.GRANITE;\n              break;\n            case 102: //Slate chunk\n              resourceGraphic = \"chunk\";\n              resourceTint = this.utils.SLATE;\n              break;\n            case 47: //Sandstone chunk\n              resourceGraphic = \"chunk\";\n              resourceTint = this.utils.SANDSTONE;\n              break;\n            case 241: //Metal Chunk\n              resourceGraphic = \"slag\";\n              break;\n            case 17: //Plasteel\n              resourceGraphic = 'resourceTint';\n              resourceTint = this.utils.PLASTEEL;\n              break;\n            case 93:\n            case 56: //compactmach\n              resourceGraphic = 'resourceTint';\n              resourceTint = this.utils.COMPONENTS;\n              break;\n            case 157:\n            case 156: //Steel\n              resourceGraphic = 'resourceTint';\n              resourceTint = this.utils.STEEL;\n              break;\n            case 103: //Uruianum\n              resourceGraphic = 'resourceTint';\n              resourceTint = this.utils.URANIUM;\n              break;\n            case 229: //GOLD\n              resourceGraphic = 'resourceTint';\n              resourceTint = this.utils.GOLD;\n              break;\n            case 194: // Sliver\n              resourceGraphic = 'resourceTint';\n              resourceTint = this.utils.SILVER;\n              break;\n            case 127: // Jade\n              resourceGraphic = 'resourceTint';\n              resourceTint = this.utils.JADE;\n              break;\n          }\n\n          if (resourceGraphic) {\n            resourceSprite = this.game.add.sprite((j * this.utils.TILESIZE), -((i + 1) * this.utils.TILESIZE), resourceGraphic);\n            resourceSprite.scale.setTo(this.utils.SCALESIZE);\n            if (resourceTint) {\n              resourceSprite.tint = resourceTint;\n            }\n            this.resourceGridLayer.add(resourceSprite);\n          }\n        }\n        masterIndex++;\n      }\n    }\n  }\n\n  renderDeepResourceTileMap() {\n\n    let masterIndex = 0;\n    let deepResourceSprite = null;\n    for (let i = 0; i < this.worldSize.x; i++) {\n      for (let j = 0; j < this.worldSize.y; j++) {\n        if (this.mapInfo.deepResourceGrid[masterIndex] > 0) {\n          deepResourceSprite = this.game.add.sprite((j * this.utils.TILESIZE), -((i + 1) * this.utils.TILESIZE), 'resourceTint');\n          deepResourceSprite.scale.setTo(this.utils.SCALESIZE);\n\n          switch (this.mapInfo.deepResourceGrid[masterIndex]) {\n            case 243: //Plasteel\n              deepResourceSprite.tint = this.utils.PLASTEEL;\n              break;\n            case 97: //Chemfuel\n              deepResourceSprite.tint = 0x00ff00;\n              break;\n            case 251: //Steel\n              deepResourceSprite.tint = this.utils.STEEL;\n              break;\n            case 160: //Uruianum\n              deepResourceSprite.tint = this.utils.URANIUM;\n              break;\n            case 125: //GOLD\n              deepResourceSprite.tint = this.utils.GOLD;\n              break;\n            case 80: // Sliver\n              deepResourceSprite.tint = this.utils.SILVER;\n              break;\n            case 22: // Jade\n              deepResourceSprite.tint = this.utils.JADE;\n              break;\n            default:\n              deepResourceSprite.tint = 0x00ff00;\n          }\n\n          this.deepResourceGridLayer.add(deepResourceSprite);\n        }\n        masterIndex++;\n      }\n    }\n  }\n  renderSnowTileMap() {\n\n    let masterIndex = 0;\n    let snowSprite = null;\n    for (let i = 0; i < this.worldSize.x; i++) {\n      for (let j = 0; j < this.worldSize.y; j++) {\n        if (this.mapInfo.snowGridLayer[masterIndex] > 0) {\n          snowSprite = this.game.add.sprite((j * this.utils.TILESIZE), -((i + 1) * this.utils.TILESIZE), 'resourceTint');\n          snowSprite.scale.setTo(this.utils.SCALESIZE);\n          snowSprite.tint = 0xffffff;\n          this.deepResourceGridLayer.add(snowSprite);\n        }\n        masterIndex++;\n      }\n    }\n  }\n\n  renderPlanning() {\n\n    let planPos = null;\n    let planSprite = null;\n\n    for (let i = this.mapInfo.planningGrid.length - 1; i > 0; i--) {\n      planPos = this.utils.getPosition(this.mapInfo.planningGrid[i].target);\n      planSprite = this.game.add.sprite(\n        (planPos[0] * this.utils.TILESIZE), -(planPos[2] * this.utils.TILESIZE),\n        \"Plan\"\n      );\n      planSprite.tint = 0xffffff;\n      planSprite.scale.setTo(this.utils.SCALESIZE);\n      this.planningLayer.add(planSprite);\n    }\n  }\n\n  renderWalls() {\n    let walls = [];\n    let sandbags = [];\n\n    let wallSprite = null;\n    let sandbagSprite = null;\n\n    let thingPos = null;\n    //BUILD EMPTY WALL ARRAY\n    for (let i = 0; i < this.worldSize.x; i++) {\n      if (!this.mapInfo.stuffRefGrid[i]) {\n        this.mapInfo.stuffRefGrid[i] = [];\n        walls[i] = [];\n        sandbags[i] = [];\n      }\n      for (let j = 0; j < this.worldSize.y; j++) {\n        this.mapInfo.stuffRefGrid[i][j] = [];\n        walls[i][j] = 0;\n        sandbags[i][j] = 0;\n      }\n    }\n\n    for (let i = 0; i < this.mapInfo.stuffGrid.length; i++) {\n      thingPos = this.utils.getPosition(this.mapInfo.stuffGrid[i].pos);\n      this.mapInfo.stuffRefGrid[thingPos[0]][thingPos[2]].push(this.mapInfo.stuffGrid[i]);\n      if (this.utils.isWall(this.mapInfo.stuffGrid[i].def)) {\n        walls[thingPos[0]][thingPos[2]] = 1;\n      } else if (this.mapInfo.stuffGrid[i].def == \"Sandbags\") {\n        sandbags[thingPos[0]][thingPos[2]] = 1;\n      }\n    }\n\n    for (let i = this.mapInfo.stuffGrid.length - 1; i > 0; i--) {\n      thingPos = this.utils.getPosition(this.mapInfo.stuffGrid[i].pos);\n      if (this.utils.isWall(this.mapInfo.stuffGrid[i].def)) {\n        let chunk = [];\n        let direction = null;\n        let wallStuff = null;\n\n        if (walls[thingPos[0] + 1]) {\n          chunk = [\n            [0, walls[thingPos[0]][thingPos[2] + 1], 0],\n            [walls[thingPos[0] - 1][thingPos[2]], 1, walls[thingPos[0] + 1][thingPos[2]]],\n            [0, walls[thingPos[0]][thingPos[2] - 1], 0]\n          ];\n        }\n\n        switch (this.mapInfo.stuffGrid[i].stuff) {\n          case \"BlocksGranite\":\n          case \"BlocksSlate\":\n          case \"BlocksMarble\":\n          case \"BlocksLimestone\":\n          case \"BlocksSandstone\":\n            wallStuff = \"brickWallTiles\"\n            break;\n          case \"WoodLog\":\n            wallStuff = \"woodWallTiles\"\n            break;\n          default:\n            wallStuff = \"wallTiles\";\n        }\n\n        direction = this.utils.matchWall(chunk);\n        wallSprite = this.game.add.sprite(\n          (thingPos[0] * this.utils.TILESIZE), -(thingPos[2] * this.utils.TILESIZE),\n          wallStuff, direction\n        );\n        wallSprite = this.utils.colorSprite(wallSprite, this.mapInfo.stuffGrid[i]);\n        wallSprite.scale.setTo(this.utils.SCALESIZE);\n        wallSprite.anchor.setTo(0.1, 0.9);\n        this.stuffGridLayer.add(wallSprite);\n      } else if (this.mapInfo.stuffGrid[i].def == \"Sandbags\") {\n        let chunk = [];\n        let direction = null;\n        if (sandbags[thingPos[0] + 1]) {\n          chunk = [\n            [0, sandbags[thingPos[0]][thingPos[2] + 1], 0],\n            [sandbags[thingPos[0] - 1][thingPos[2]], 1, sandbags[thingPos[0] + 1][thingPos[2]]],\n            [0, sandbags[thingPos[0]][thingPos[2] - 1], 0]\n          ];\n        }\n        direction = this.utils.matchWall(chunk);\n        sandbagSprite = this.game.add.sprite(\n          (thingPos[0] * this.utils.TILESIZE), -(thingPos[2] * this.utils.TILESIZE),\n          'sandbagTiles', direction\n        );\n        sandbagSprite.tint = this.utils.SAND;\n        sandbagSprite.scale.setTo(this.utils.SCALESIZE);\n        sandbagSprite.anchor.setTo(0.1, 0.9);\n        this.stuffGridLayer.add(sandbagSprite);\n      } //End Wall Sandbag elseif\n    } //End For\n  }\n  renderMountain() {\n    //IF WALL CHOOSE WALL SPRITE\n    let chunk = [];\n    let masterIndex = 0;\n    let rockSprite;\n    let rockTint;\n\n    for (let i = 0; i < this.worldSize.x; i++) {\n      for (let j = 0; j < this.worldSize.y; j++) {\n        if (this.mapInfo.resourceRefGrid[masterIndex] > 0) {\n          switch (this.mapInfo.resourceRefGrid[masterIndex]) {\n            case 78:  //Marble chunk\n            case 119: //Limestone chunk\n            case 252: //Granite chunk\n            case 102: //Slate chunk\n            case 47:  //Sandstone chunk\n            case 241: //Metal Chunk\n              this.rockGrid[i][j] = 0; //Ignore Rock chunks\n              break;\n            default:\n              this.rockGrid[i][j] = 1;\n          }\n        }\n        masterIndex++;\n      }\n    }\n    masterIndex = 0;\n    let direction = null;\n    let rockTintSprite = null;\n\n    for (let i = 0; i < this.worldSize.x; i++) {\n      for (let j = 0; j < this.worldSize.y; j++) {\n        if (this.rockGrid[i][j] == 1) {\n          if (this.rockGrid[i - 1] && this.rockGrid[j - 1] && this.rockGrid[i + 1] && this.rockGrid[j + 1]) {\n            chunk = [\n              [0, this.rockGrid[i + 1][j], 0],\n              [this.rockGrid[i][j - 1], 1, this.rockGrid[i][j + 1]],\n              [0, this.rockGrid[i - 1][j], 0]\n            ];\n            direction = this.utils.matchWall(chunk);\n          } else {\n            direction = null;\n          }\n\n          //Decide color here\n          if (direction != null) {\n            rockSprite = this.game.add.sprite(\n              (j * this.utils.TILESIZE), -(i * this.utils.TILESIZE),\n              'rockTiles', direction\n            );\n\n            rockSprite.anchor.setTo(0.1, 0.9);\n            switch (this.mapInfo.resourceRefGrid[masterIndex]) { //USE TERRAIN\n              case 67:\n                rockSprite.tint = this.utils.SANDSTONE;\n                break;\n              case 197:\n                rockSprite.tint = this.utils.SLATE;\n                break;\n              case 84:\n                rockSprite.tint = this.utils.GRANITE;\n                break;\n              case 212:\n                rockSprite.tint = this.utils.MARBLE;\n                break;\n              case 139:\n              case 138:\n                rockSprite.tint = this.utils.LIMESTONE;\n                break;\n              case 93:\n              case 56:\n                rockSprite.tint = this.utils.COMPONENTS;\n                break;\n              case 229:\n                rockSprite.tint = this.utils.GOLD;\n                break;\n              case 103:\n                rockSprite.tint = this.utils.URANIUM;\n                break;\n              case 157:\n              case 156:\n                rockSprite.tint = this.utils.STEEL;\n                break;\n              case 127:\n                rockSprite.tint = this.utils.JADE;\n                break;\n              case 194:\n                rockSprite.tint = this.utils.SILVER;\n                break;\n            }\n            rockSprite.scale.setTo(this.utils.SCALESIZE);\n            this.rocksGridLayer.add(rockSprite);\n          }\n          //Tint all rock tiles and add to mountain group\n          rockTint = null;\n          rockTint = this.game.add.sprite(\n            (j * this.utils.TILESIZE), -((i + 1) * this.utils.TILESIZE),\n            'rockTint'\n          );\n          //this has a weird problem\n          rockTint.scale.setTo(this.utils.SCALESIZE);\n          this.mountainsLayer.add(rockTint);\n        }\n        masterIndex++;\n      }\n    }\n  }\n  hideStuff() {\n    this.stuffLayer.alpha = 0;\n  }\n\n  showStuff() {\n    this.stuffLayer.alpha = 1;\n  }\n\n  hideResources() {\n    this.resourceLayer.alpha = 0;\n    this.loadingFinished = true;\n  }\n\n  showResources() {\n    this.loadingFinished = false;\n    if (!this.resourceLayer) {\n      let oldCam = {\n        x: this.game.camera.x,\n        y: this.game.camera.y\n      }\n      this.game.camera.x = 0;\n      this.game.camera.y = 0;\n      setTimeout(() => {\n        this.renderResourceTileMap();\n        this.resourceLayer = this.renderBitmap(this.resourceGridLayer, true);\n        this.resourceLayer.scale.set(1 / this.zoomLevel);\n        setTimeout(() => {\n          this.game.camera.x = oldCam.x;\n          this.game.camera.y = oldCam.y;\n          this.loadingFinished = true;\n        }, 500);\n      }, 500);\n    } else {\n      this.resourceLayer.alpha = 1;\n      this.loadingFinished = true;\n    }\n  }\n  hideDeepResources() {\n    this.deepResourceLayer.alpha = 0;\n    this.loadingFinished = true;\n  }\n\n  showDeepResources() {\n    this.loadingFinished = false;\n    if (!this.deepResourceLayer) {\n      let oldCam = {\n        x: this.game.camera.x,\n        y: this.game.camera.y\n      }\n      this.game.camera.x = 0;\n      this.game.camera.y = 0;\n      setTimeout(() => {\n        this.renderDeepResourceTileMap();\n        //this.renderSnowTileMap();\n        this.deepResourceLayer = this.renderBitmap(this.deepResourceGridLayer, true);\n        this.deepResourceLayer.scale.set(1 / this.zoomLevel);\n        setTimeout(() => {\n          this.game.camera.x = oldCam.x;\n          this.game.camera.y = oldCam.y;\n          this.loadingFinished = true;\n        }, 500);\n      }, 500);\n    } else {\n      this.deepResourceLayer.alpha = 1;\n      this.loadingFinished = true;\n    }\n  }\n\n  hideMountains() {\n    this.rocksLayer.alpha = 0;\n  }\n\n  showMountains() {\n    this.rocksLayer.alpha = 1;\n  }\n\n  showPlanning() {\n    this.loadingFinished = false;\n    if (!this.planningLayer) {\n      let oldCam = {\n        x: this.game.camera.x,\n        y: this.game.camera.y\n      }\n      this.game.camera.x = 0;\n      this.game.camera.y = 0;\n      setTimeout(() => {\n        this.renderPlanning();\n        this.planningLayer = this.renderBitmap(this.planningLayer, true);\n        this.planningLayer.scale.set(1 / this.zoomLevel);\n        setTimeout(() => {\n          this.game.camera.x = oldCam.x;\n          this.game.camera.y = oldCam.y;\n          this.loadingFinished = true;\n        }, 500);\n      }, 500);\n    } else {\n      this.planningLayer.alpha = 1;\n      this.loadingFinished = true;\n    }\n  }\n  hidePlanning() {\n    this.planningLayer.alpha = 0;\n    this.loadingFinished = true;\n  }\n  scaleMap(scale) {\n\n    this.marker.scale.setTo(scale);\n\n    if (this.topTerrainGridLayer) {\n      this.topTerrainGridLayer.setScale(scale, scale);\n      this.topTerrainGridLayer.resize(this.game.width / scale, this.game.height / scale);\n      this.topTerrainGridLayer.resizeWorld();\n    } else {\n      this.terrainLayer.scale.set(scale);\n    }\n\n    this.stuffLayer.scale.set(scale);\n\n    this.zoomLevel = 1 / scale;\n\n    if (this.rocksLayer) {\n      this.rocksLayer.scale.set(scale);\n    }\n    if (this.resourceLayer) {\n      this.resourceLayer.scale.set(scale);\n    }\n    if (this.deepResourceLayer) {\n      this.deepResourceLayer.scale.set(scale);\n    }\n    if(this.planningLayer){\n      this.planningLayer.scale.set(scale);\n    }\n\n  }\n  zoomMap(iZoom) {\n\n    this.zoomLevel = iZoom;\n\n    this.stuffLayer.scale.set(1 / this.zoomLevel);\n\n    if (this.rocksLayer) {\n      this.rocksLayer.scale.set(1 / this.zoomLevel);\n    }\n    if (this.resourceLayer) {\n      this.resourceLayer.scale.set(1 / this.zoomLevel);\n    }\n    if (this.deepResourceLayer) {\n      this.deepResourceLayer.scale.set(1 / this.zoomLevel);\n    }\n    if(this.planningLayer){\n      this.planningLayer.scale.set(1 / this.zoomLevel);\n    }\n    this.marker.scale.setTo(1 / this.zoomLevel);\n\n    if(this.topTerrainGridLayer){\n      this.topTerrainGridLayer.setScale(1 / this.zoomLevel, 1 / this.zoomLevel);\n      this.topTerrainGridLayer.resize(this.game.width * this.zoomLevel, this.game.height * this.zoomLevel);\n      this.topTerrainGridLayer.resizeWorld();\n    }else{\n      this.terrainLayer.scale.set(1 / this.zoomLevel);\n    }\n  }\n\n  markerInit() {\n    this.marker = this.game.add.graphics();\n    this.marker.lineStyle(2, 0xFF4444, 1);\n    this.marker.drawRect(0, 0, this.utils.TILESIZE, this.utils.TILESIZE);\n  }\n\n  getTileProperties() {\n\n    this.currentTile = {\n      \"terrainTile\": null,\n      \"resourceTile\": null,\n      \"deepResourceTile\": null,\n      \"stuffTile\": null, //count manage\n      \"totalHealth\": 0,\n      \"currentHealth\": 0\n    };\n    let x = 0;\n    let y = 0;\n    let flippedY = 0;\n    let terrainTile = null;\n    if (this.topTerrainGridLayer) {\n      x = this.topTerrainGridLayer.getTileX(this.game.input.activePointer.worldX * this.zoomLevel); // 4 * ZOOM\n      y = this.topTerrainGridLayer.getTileY(this.game.input.activePointer.worldY * this.zoomLevel);\n      flippedY = Math.abs(y - this.worldSize.y);\n      flippedY = flippedY - 1;\n      terrainTile = this.topTerrainGridLayer.map.getTile(x, y, this.topTerrainGridLayer);\n    } else {\n      x = Phaser.Math.snapTo(this.game.input.activePointer.worldX-((this.utils.TILESIZE/2)/ this.zoomLevel),this.utils.TILESIZE / this.zoomLevel);\n      y = Phaser.Math.snapTo(this.game.input.activePointer.worldY-((this.utils.TILESIZE/2)/ this.zoomLevel),this.utils.TILESIZE / this.zoomLevel);\n\n      x = Math.round((x/this.utils.TILESIZE)*this.zoomLevel)\n      y = Math.round((y/this.utils.TILESIZE)*this.zoomLevel)\n\n      flippedY = Math.abs(y - this.worldSize.y);\n      flippedY = flippedY - 1;\n      terrainTile = this.mapInfo.topTerrainGrid[flippedY * this.worldSize.y + x];\n      //console.log(terrainTile + \" - \" + this.mapInfo.topTerrainGrid[flippedY * this.worldSize.y + x]);\n    }\n    let stuffTile = null;\n    let resourceTile = null;\n    let deepResourceTile = null;\n\n    if (x >= 0 && x <= this.worldSize.x &&\n      y >= 0 && y <= this.worldSize.y) {\n      stuffTile = this.mapInfo.stuffRefGrid[x][flippedY];\n      resourceTile = this.mapInfo.resourceRefGrid[flippedY * this.worldSize.y + x];\n      deepResourceTile = this.mapInfo.deepResourceGrid[flippedY * this.worldSize.y + x];\n    }\n\n    if (terrainTile != null) {\n      if(this.topTerrainGridLayer){\n        this.currentTile.terrainTile = this.utils.getTerrainName(terrainTile.index + 1) + \" - \" + (terrainTile.index + 1);\n      }else{\n        this.currentTile.terrainTile = this.utils.getTerrainName(terrainTile + 1) + \" - \" + (terrainTile + 1);\n      }\n    }\n    if (stuffTile) {\n      this.oldStuffTile = stuffTile;\n\n      if (stuffTile[0]) {\n        console.log(stuffTile);\n\n        this.clickDepth = stuffTile.length;\n\n        if (stuffTile != this.oldStuffTile) {\n          this.clickIndex = 0;\n        } else if (this.clickIndex < this.clickDepth - 1) {\n          this.clickIndex++;\n        } else {\n          this.clickIndex = 0;\n        }\n        if (stuffTile[this.clickIndex]) {\n          let stuffMaterial = stuffTile[this.clickIndex].stuff;\n          let stuffName = stuffTile[this.clickIndex].def;\n          let stuffHealth = stuffTile[this.clickIndex].health;\n          let stuffStack = stuffTile[this.clickIndex].stackCount;\n          this.currentTile.stuffTile = ((stuffMaterial) ? stuffMaterial + \" \" : \"\") + stuffName + ((stuffStack) ? \" x\" + stuffStack : \"\") + ((stuffHealth) ? \" (\" + stuffHealth + \" HP)\" : \"\");\n        }\n      }\n    }\n    if (resourceTile) {\n      this.currentTile.resourceTile = this.utils.getResourceName(resourceTile) + \" - \" + resourceTile;\n    }\n    if (deepResourceTile) {\n      this.currentTile.deepResourceTile = this.utils.getDeepResourceName(deepResourceTile) + \" x\" + this.mapInfo.deepResourceCount[(flippedY - 1) * this.worldSize.y + x] + \" - \" + deepResourceTile;\n    }\n  }\n\n  isMouseOut() {\n\n    if (this.topTerrainGridLayer) {\n      if (\n        this.topTerrainGridLayer.getTileX(this.game.input.activePointer.worldX * this.zoomLevel) >= 0 &&\n        this.topTerrainGridLayer.getTileX(this.game.input.activePointer.worldX * this.zoomLevel) < this.worldSize.x &&\n        this.topTerrainGridLayer.getTileY(this.game.input.activePointer.worldY * this.zoomLevel) >= 0 &&\n        this.topTerrainGridLayer.getTileY(this.game.input.activePointer.worldY * this.zoomLevel) < this.worldSize.y) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      let x = Math.round((this.game.input.activePointer.worldX / this.utils.TILESIZE) * this.zoomLevel);\n      let y = Math.round((this.game.input.activePointer.worldY / this.utils.TILESIZE) * this.zoomLevel);\n      let flippedY = Math.abs(y - this.worldSize.y);\n      if (x >= 0 && x < this.worldSize.x && y >= 0 && y < this.worldSize.y) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n}\nexport default GameState;\n",
    "class Preload extends Phaser.State {\n  preload() {\n    //  Set-up our preloader sprite\n    let preloadBg = this.add.sprite(this.game.world.centerX, this.game.world.centerY, 'preloadBg');\n    preloadBg.anchor.setTo(0.5);\n\n    this.preloadBar = this.add.sprite(this.game.world.centerX - 256, this.game.world.centerY, 'preloadBar');\n    this.load.setPreloadSprite(this.preloadBar);\n\n    this.preloadBar.anchor.setTo(0, 0.5);\n\n    this.game.load.spritesheet('wallTiles', 'assets/vanilla/WallTilemap.png', 80, 80, 16);\n    this.game.load.spritesheet('brickWallTiles', 'assets/vanilla/BrickTileMap.png', 80, 80, 16);\n    this.game.load.spritesheet('woodWallTiles', 'assets/vanilla/WoodTilemap.png', 80, 80, 16);\n    this.game.load.spritesheet('rockTiles', 'assets/vanilla/Rock_Atlas.png', 80, 80, 16);\n    this.game.load.spritesheet('sandbagTiles', 'assets/vanilla/Sandbags_Atlas.png', 80, 80, 16);\n    this.game.load.image('chunk', 'assets/vanilla/RockLowA.png');\n    this.game.load.image('slag', 'assets/vanilla/MetalDebrisA.png');\n\n    this.game.load.image('Plan', 'assets/Plan.png');\n    this.game.load.image('rockTint', 'assets/rockTint.png');\n    this.game.load.image('resourceTint', 'assets/resourceTint.png');\n\n    this.game.load.script('pako', 'assets/pako.min.js');\n    this.game.load.script('base64js', 'assets/base64js.min.js');\n\n\n    //new AssetLoader(this.game, this.game.cache.getJSON(\"assets\"));\n\n  }\n  create() {\n    let tween = this.add.tween(this.preloadBar).to({\n      alpha: 0\n    }, 1000, Phaser.Easing.Linear.None, true);\n    tween.onComplete.add(this.startMainMenu, this);\n\n  }\n  startMainMenu() {\n    this.game.state.start('DynamicLoad');\n  }\n\n}\nexport default Preload;\n",
    "class PreloadAssets extends Phaser.State {\n\n  init(assets,json){\n    this.toLoadJson = assets;\n    this.json = json;\n  }\n\n  preload() {\n    //  Set-up our preloader sprite\n    let preloadBg = this.add.sprite(this.game.world.centerX, this.game.world.centerY, 'preloadBg');\n    preloadBg.anchor.setTo(0.5);\n\n    this.preloadBar = this.add.sprite(this.game.world.centerX - 256, this.game.world.centerY, 'preloadBar');\n    this.load.setPreloadSprite(this.preloadBar);\n\n    this.preloadBar.anchor.setTo(0, 0.5);\n\n    this.text = this.game.add.text(256, this.game.world.centerY + 64, 'Click to start load', { font: \"normal 18px Arial\", align: 'left', fill: '#ffffff'});\n\n    if(this.game.hd == false){\n      this.game.load.image('tiles', 'assets/ShiftTilemap16.bmp');\n      this.game.load.spritesheet('tileMap', 'assets/ShiftTilemap16.bmp', 16, 16);\n    }else{\n      this.game.load.image('tiles', 'assets/ShiftTilemap32.bmp');\n      this.game.load.spritesheet('tileMap', 'assets/ShiftTilemap32.bmp', 32, 32);\n\n    }\n\n   new AssetLoader(this.game, this.toLoadJson);\n\n   this.game.load.onFileComplete.add(this.fileComplete, this);\n   this.game.load.onLoadComplete.add(this.onLoadComplete, this);\n\n   this.game.time.advancedTiming = true;\n   this.game.antialias = false;\n   this.game.scale.pageAlignHorizontally = true;\n   this.game.scale.pageAlignVertically = true;\n\n\n  }\n  create() {\n    let tween = this.add.tween(this.preloadBar).to({\n      alpha: 0\n    }, 250, Phaser.Easing.Linear.None, true);\n    //tween.onComplete.add(this.startMainRender, this);\n  }\n\n  fileComplete(progress, cacheKey, success, totalLoaded, totalFiles) {\n\t   this.text.setText(\"Downloading assets: \" + progress + \"% - \" + totalLoaded + \" out of \" + totalFiles);\n  }\n\n  onLoadComplete() {\n    this.text.setText(\"Downloaded all assets! Start rendering...\");\n    this.game.json = this.json;\n    this.game.state.start('GameState');\n\n  }\n\n}\nexport default PreloadAssets;\n",
    "\nclass Utils {\n\n  constructor(game){\n    this.game = game;\n    this.worldSize = {\n        x: 0,\n        y: 0,\n        z: 0\n      };\n\n      if (this.game.hd == false) {\n        this.TILESIZE = 16; //default\n        this.SCALESIZE = 0.25;\n      } else {\n        this.TILESIZE = 32; //orginal 64, cut in half to save memory.\n        this.SCALESIZE = 0.5;\n      }\n\n      this.GRANITE = 0x635e5b;\n      this.LIMESTONE = 0x5f5c44;\n      this.SANDSTONE = 0x756157;\n      this.MARBLE = 0x777877;\n      this.SLATE = 0x3a3a39;\n      this.SAND = 0x998864;\n\n      this.WOOD = 0xBF6C2A;\n      this.STEEL = 0xb7b7b7;\n      this.PLASTEEL = 0x7bafae;\n      this.COMPONENTS = 0x755808;\n      this.GOLD = 0xD0B703;\n      this.SILVER = 0x939086;\n      this.URANIUM = 0x727272;\n      this.JADE = 0x438347;\n\n      this.ALPACA = 0xedd8ae;\n      this.ALPHABEAVER = 0x735348;\n      this.FOXARCTIC = 0xc8c8c8;\n      this.WOLFARCTIC = 0xc8c8c8;\n      this.BOOMALOPE = 0xb0966a;\n      this.BOOMRAT = 0x73251c;\n      this.CAPYBARA = 0xb97d4f;\n      this.CARIBOU = 0xad634d;\n      this.CASSOWARY = 0x505050;\n      this.CAT = 0xbdab9f;\n      this.CHICKEN = 0xc89655;\n      this.CAMEL = 0xb7a23a;\n      this.CHINCHILLA = 0xb2aa9e;\n      this.COBRA = 0x716257;\n      this.COUGAR = 0xb18870;\n      this.COW = 0xc9c9c9;\n      this.DEER = 0xa26a39;\n      this.DROMEDARY = 0xccb496;\n      this.ELEPHANT = 0x827e77;\n      this.ELK = 0xa26a39;\n      this.EMU = 0x7a6d63;\n      this.FOXFENNEC = 0xc5a167;\n      this.GAZELLE = 0xd6863b;\n      this.GRIZZLYBEAR = 0x705241;\n      this.HARE = 0x83806c;\n      this.HUMAN = 0xd3c28f;\n      this.HUSKY = 0x898585;\n      this.IBEX = 0x998171;\n      this.IGUANA = 0x65743a;\n      this.LABRADORRETRIEVER = 0xdcc6a0;\n      this.LYNX = 0xad9b8a;\n      this.MEGASCARAB = 0x726b54;\n      this.MEGASLOTH = 0xbda174;\n      this.MEGASPIDER = 0x9a7d5e;\n      this.MONKEY = 0x7c351d;\n      this.MUFFALO = 0x98aaae;\n      this.OSTRICH = 0x4c5363;\n      this.PANTHER = 0x3c3c3c;\n      this.PIG = 0xae967e;\n      this.POLARBEAR = 0xb4b4b4;\n      this.RACCOON = 0xaeacae;\n      this.RAT = 0x6e5f52;\n      this.FOXRED = 0xb26422;\n      this.RHINOCEROS = 0x969696;\n      this.SNOWHARE = 0xb4b4b4;\n      this.SPELOPEDE = 0x9c947d;\n      this.SQUIRREL = 0x8c5524;\n      this.THRUMBO = 0xe9e9e9;\n      this.WOLFTIMBER = 0x736e64;\n      this.TORTOISE = 0x474f31;\n      this.TURKEY = 0x505050;\n      this.WARG = 0x7b6859;\n      this.WILDBOAR = 0xae967e;\n      this.YORKSHIRETERRIER = 0xd1a827;\n\n      this.LEATHER = 0xa26a39;\n      this.SYNTHREAD = 0xb0e5de;\n\n      this.MEAT = 0xB03030;\n\n      this.DEVILSTRAND = 0x8c1d10;\n      this.CLOTH = 0xc3c0b0;\n\n  }\n\n  getStuffName(stuff) {\n    let regex = new RegExp('\\_(.*)'); /// after _\n    let preRegex = new RegExp('^(.+?)_'); /// before _\n    let outputName = null;\n    if (regex.exec(stuff)) {\n      if (preRegex.exec(stuff)[1] == \"Shell\" ||\n        preRegex.exec(stuff)[1] == \"TrapIED\") {\n        outputName = stuff;\n      } else if (preRegex.exec(stuff)[1] == \"Plant\")  { //VERSION 0.19\n        outputName = preRegex.exec(stuff)[1] + regex.exec(stuff)[1];\n      } else if (\n        preRegex.exec(stuff)[1] == \"Filth\" ||\n        preRegex.exec(stuff)[1] == \"Dirt\" ||\n        preRegex.exec(stuff)[1] == \"Blood\" ||\n        preRegex.exec(stuff)[1] == \"Leather\" ||\n        preRegex.exec(stuff)[1] == \"Blueprint\" ||\n        preRegex.exec(stuff)[1] == \"Install\" ||\n        preRegex.exec(stuff)[1] == \"Frame\" ||\n        preRegex.exec(stuff)[1] == \"Meat\"){\n          outputName = preRegex.exec(stuff)[1];\n      }else {\n        outputName = regex.exec(stuff)[1];\n      }\n    } else {\n      outputName = stuff;\n    }\n    return outputName;\n  }\n  getTerrainName(id) {\n    let output = null;\n    switch (id) {\n      case 1: //Concrete\n        output = \"Concrete\";\n        break;\n      case 2: //Paved\n        output = \"Paved\";\n        break;\n      case 3: //Wood\n        output = \"Wood Floor\";\n        break;\n      case 4: //metal //IF UNDER\n        output = \"Metal\";\n        break;\n      case 5: //silver //IF UNDER\n        output = \"Silver\";\n        break;\n      case 6: //gold  //IF UNDER\n        output = \"Gold\";\n        break;\n      case 7: //sterile //If under\n        output = \"Sterile\";\n        break;\n      case 8: //red\n        output = \"Red Carpet\";\n        break;\n      case 9: //green\n        output = \"Green Carpet\";\n        break;\n      case 10: //blue\n        output = \"Blue Carpet\";\n        break;\n      case 11: //cream\n        output = \"Cream Carpet\";\n        break;\n      case 12: //dark\n        output = \"Dark Carpet\";\n        break;\n      case 13: //burned wood\n        output = \"Burned Wood Floor\";\n        break;\n      case 14: //burned carpet\n        output = \"Burned Carpet\";\n        break;\n      case 15: //sandstone tile\n        output = \"Sandstone Tile\";\n        break;\n      case 16: //granite tile\n        output = \"Granite Tile\";\n        break;\n      case 17: //limestone tile\n        output = \"Limestone Tile\";\n        break;\n      case 18: //slate tile\n        output = \"Slate Tile\";\n        break;\n      case 19: //Marble tile\n        output = \"Marble Tile\";\n        break;\n      case 20: //Sandstone flag\n        output = \"Sandstone Flagstone\";\n        break;\n      case 21: //Granite flag\n        output = \"Granite Flagstone\";\n        break;\n      case 22: //Limestone flag\n        output = \"Limestone Flagstone\";\n        break;\n      case 23: //Slate flag\n        output = \"Slate Flagstone\";\n        break;\n      case 24: //Marble flagstone\n        output = \"Marble Flagstone\";\n        break;\n      case 25: //sand\n        output = \"Sand\";\n        break;\n      case 26: //soil\n        output = \"Soil\";\n        break;\n      case 27: //marshy soil\n        output = \"Marshy Soil\";\n        break;\n      case 28: // rich soil\n        output = \"Rich Soil\";\n        break;\n      case 29: //mud\n        output = \"Mud\";\n        break;\n      case 30: //marsh\n        output = \"Marsh\";\n        break;\n      case 31: //gravel\n        output = \"Gravel\";\n        break;\n      case 32: //lichen covered\n        output = \"Lichen Covered Dirt\";\n        break;\n      case 33: //ice\n        output = \"Ice\";\n        break;\n      case 34: //broken asphalt\n        output = \"Broken Asphalt\";\n        break;\n      case 35: // packed dirt\n        output = \"Packed Dirt\";\n        break;\n      case 36: //underwall\n        output = \"Underwall\";\n        break;\n      case 37: //deep water\n        output = \"Deep Water\";\n        break;\n      case 38: //moving deep water\n        output = \"Moving Deep Water\";\n        break;\n      case 39: //shallow water\n        output = \"Shallow Water\";\n        break;\n      case 40: //shallow ocean\n        output = \"Shallow Ocean\";\n        break;\n      case 40: //shallow moving water\n        output = \"Shallow Moving Water\";\n        break;\n      case 41: //rough sandstone\n        output = \"Rough Sandstone\";\n        break;\n      case 42: // rough hewn sandstone\n        output = \"Rough Hewn Sandstone\";\n        break;\n      case 43: //smooth sandstone\n        output = \"Smooth Sandstone\";\n        break;\n      case 44: // rough granite\n        output = \"Rough Granite\";\n        break;\n      case 45: // rough hewn granite\n        output = \"Rough Hewn Granite\";\n        break;\n      case 46: //smooth granite\n        output = \"Smooth Granite\";\n        break;\n      case 47: //rough limestone\n        output = \"Rough Limestone\";\n        break;\n      case 48: // rought hewn limestone\n        output = \"Rough Hewn Limestone\";\n        break;\n      case 49: //smooth limestone\n        output = \"Smooth Limestone\";\n        break;\n      case 50: //rough slate\n        output = \"Rough Slate\";\n        break;\n      case 51: //rough hewn slate\n        output = \"Rough Hewn Slate\";\n        break;\n      case 52: //smooth slate\n        output = \"Smooth Slate\";\n        break;\n      case 53: //rough marble\n        output = \"Rough Marble\";\n        break;\n      case 54: //rough hewn marble\n        output = \"Rough Hewn Marble\";\n        break;\n      case 55: //smooth marble\n        output = \"Smooth Marble\";\n        break;\n      default:\n        output = id + \" - no tile found\";\n    }\n    return output;\n  }\n\n  getResourceName(id) {\n    let output = null;\n    switch (id) {\n      case 139:\n      case 138: //Limestone\n        output = \"Limestone\";\n        break;\n      case 84: //Granite\n        output = \"Granite\";\n        break;\n      case 212: //Marble\n        output = \"Marble\";\n        break;\n      case 67: //Sandstonerock\n        output = \"Sandstone\";\n        break;\n      case 197: //Slate\n        output = \"Slate\";\n        break;\n      case 17: //Plasteel\n        output = \"Plasteel\";\n        break;\n      case 93:\n      case 56: //compactsteel\n        output = \"Compacted Machinery\";\n        break;\n      case 157:\n      case 156: //Steel\n        output = \"Steel\";\n        break;\n      case 103: //Uranium\n        output = \"Uranium\";\n        break;\n      case 194: // Sliver\n        output = \"Sliver\";\n        break;\n      case 229: //Gold\n        output = \"Gold\";\n        break;\n      case 127: // Jade\n        output = \"Jade\";\n        break;\n      case 102: //Slate\n        output = \"Slate Chunk\";\n        break;\n      case 78: // Marble\n        output = \"Marble Chunk\";\n        break;\n      case 119: // Limestone\n        output = \"Limestone Chunk\";\n        break;\n      case 252: // Granite\n        output = \"Granite Chunk\";\n        break;\n      case 47: // Sandstone\n        output = \"Sandstone Chunk\";\n        break;\n      case 241: // Metal Chunk\n        output = \"Metal Chunk\";\n        break;\n\n      default:\n        output = null;\n    }\n    return output;\n  }\n\n  getDeepResourceName(id) {\n    let output = null;\n    switch (id) {\n\n      case 251: //Steel\n        output = \"Steel\";\n        break;\n      case 97: // Fuel\n        output = \"Chemfuel\";\n        break;\n      case 160: //Uruianum\n        output = \"Uruianum\";\n        break;\n      case 243: //plasteel\n        output = \"Plasteel\";\n        break;\n      case 125: //Gold\n        output = \"Gold\";\n        break;\n      case 22: //Jade\n        output = \"Jade\";\n        break;\n      case 80: //Silver\n        output = \"Silver\";\n        break;\n      default:\n        output = null;\n    }\n    return output;\n  }\n\n  decompress(rawGrid) {\n    //TOPGRID\n    //DECODE BASE 64 TO BINARY\n    let binary = atob(rawGrid);\n    let output = [];\n    //INFLATE/DECOMPRESS TOPGRID\n    try {\n      output = pako.inflate(binary, {\n        raw: true\n      });\n    } catch (err) {\n      console.log(err);\n    }\n    return (this.delaceArray(output));\n  }\n\n/*  //EXPERIMENTAL DONT USE\nnewDecompress(rawGrid) {\n    //TOPGRID\n    //DECODE BASE 64 TO BINARY\n    let binary = atob(rawGrid);\n    let output = [];\n    //INFLATE/DECOMPRESS TOPGRID\n    try {\n      output = pako.inflate(binary, {\n        windowBits : 0,\n        raw: true\n      });\n\n    } catch (err) {\n      console.log(err);\n    }\n\n    //output =  this.Base64Encode(output);\n    return output;\n  }\n\n\n  Base64Encode(str, encoding = 'utf-8') {\n    var bytes = new (TextEncoder || TextEncoderLite)(encoding).encode(str);\n    return base64js.fromByteArray(bytes);\n  }\n\n  Base64Decode(str, encoding = 'utf-8') {\n    var bytes = base64js.toByteArray(str);\n    return new (TextDecoder || TextDecoderLite)(encoding).decode(bytes);\n  }\n  */\n\n\n  getPosition(raw) {\n    //Remove the () + comma seperate the x y z\n    let formattedSize = raw.replace(/[(-)]/g, '');\n    //Split out into an array\n    formattedSize = formattedSize.split(\",\");\n    //Loop through the array to make it all ints\n    for (let i = 0; i < formattedSize.length; i++) {\n      formattedSize[i] = parseInt(formattedSize[i]);\n    }\n    return formattedSize;\n  }\n  getColor(raw) {\n    //Remove the () + comma seperate the x y z\n    let formattedSize = raw.replace(/[RGBA(-)]/g, '');\n    //Split out into an array\n    formattedSize = formattedSize.split(\",\");\n    //Loop through the array to make it all ints\n    for (let i = 0; i < formattedSize.length; i++) {\n      let byte = Math.floor(formattedSize[i] >= 1.0 ? 255 : formattedSize[i] * 256.0)\n      formattedSize[i] = byte;\n    }\n    return formattedSize;\n  }\n\n  delaceArray(iArray) {\n    let masterIndex = 0;\n    let outputArray = [];\n\n    //Delace array\n    for (var r = this.worldSize.x; r > 0; r--) {\n      for (var c = this.worldSize.y * 2; c > 0; c--) {\n        if (c % 2 === 0) { //Have to skip every other byte due to weird decompression error\n          // outputArray.push(iArray[masterIndex] ^ iArray[masterIndex + 1]);\n          outputArray.push(iArray[masterIndex]);\n        }\n        masterIndex++;\n      }\n    }\n    return outputArray;\n  }\n\n  //Make array 2D\n  formatArray(iArray) {\n    let masterIndex = 0;\n    let outputArray = [];\n    let row = [];\n    for (let y = 0; y < this.worldSize.y; y++) {\n      row = [];\n      for (let x = 0; x < this.worldSize.x; x++) {\n        row.push(iArray[masterIndex]);\n        masterIndex++;\n      }\n      outputArray.push(row);\n    }\n    outputArray = outputArray.reverse()\n    return outputArray;\n  }\n  colorSprite(sprite, thingRef) {\n    //If thing has stuff do stuff case, if not do based on names\n    let currentSprite = null;\n\n    if (thingRef.color) {\n      let rawColor = this.getColor(thingRef.color);\n      let hexColor = Phaser.Color.getColor(rawColor[0], rawColor[1], rawColor[2]);\n      sprite.tint = hexColor\n    } else {\n      if (thingRef.stuff) {\n        currentSprite = thingRef.stuff;\n      } else {\n        currentSprite = thingRef.def;\n      }\n      switch (currentSprite) {\n        case \"ChunkSandstone\":\n        case \"SmoothedSandstone\":\n        case \"BlocksSandstone\":\n          sprite.tint = this.SANDSTONE;\n          break;\n        case \"ChunkGranite\":\n        case \"SmoothedGranite\":\n        case \"BlocksGranite\":\n          sprite.tint = this.GRANITE;\n          break;\n        case \"ChunkSlate\":\n        case \"SmoothedSlate\":\n        case \"BlocksSlate\":\n          sprite.tint = this.SLATE;\n          break;\n        case \"ChunkLimestone\":\n        case \"SmoothedLimestone\":\n        case \"BlocksLimestone\":\n          sprite.tint = this.LIMESTONE;\n          break;\n        case \"ChunkMarble\":\n        case \"SmoothedMarble\":\n        case \"BlocksMarble\":\n          sprite.tint = this.MARBLE;\n          break;\n        case \"WoodLog\":\n          sprite.tint = this.WOOD;\n          break;\n        case \"Cloth\":\n          sprite.tint = this.CLOTH;\n          break;\n        case \"ToolCabinet\":\n          sprite.tint = 0x60725f;\n          break;\n        case \"Leather_Bluefur\":\n        case \"WoolMuffalo\":\n        case \"Muffalo_Leather\":\n          sprite.tint = this.MUFFALO;\n          break;\n        case \"WoolAlpaca\":\n        case \"Alpaca_Leather\":\n          sprite.tint = this.ALPACA;\n          break;\n\n        case \"DevilstrandCloth\":\n          sprite.tint = this.DEVILSTRAND;\n          break;\n        case \"Alphabeaver_Leather\":\n          sprite.tint = this.ALPHABEAVER;\n          break;\n        case \"FoxArctic_Leather\":\n          sprite.tint = this.FOXARCTIC;\n          break;\n        case \"WolfArctic_Leather\":\n          sprite.tint = this.WOLFARCTIC;\n          break;\n        case \"Boomalope_Leather\":\n          sprite.tint = this.BOOMALOPE;\n          break;\n        case \"Boomrat_Leather\":\n          sprite.tint = this.BOOMRAT;\n          break;\n        case \"Capybara_Leather\":\n          sprite.tint = this.CAPYBARA;\n          break;\n        case \"Caribou_Leather\":\n          sprite.tint = this.CARIBOU;\n          break;\n        case \"WoolCamel\":\n        case \"Leather_Camel\":\n        case \"Camel_Leather\":\n          sprite.tint = this.CAMEL;\n          break;\n        case \"Cassowary_Leather\":\n          sprite.tint = this.CASSOWARY;\n          break;\n        case \"Cat_Leather\":\n          sprite.tint = this.CAT;\n          break;\n        case \"Chicken_Leather\":\n          sprite.tint = this.CHICKEN;\n          break;\n        case \"Leather_Chinchilla\":\n        case \"Chinchilla_Leather\":\n          sprite.tint = this.CHINCHILLA;\n          break;\n        case \"Cobra_Leather\":\n          sprite.tint = this.ALPACA;\n          break;\n        case \"Cougar_Leather\":\n          sprite.tint = this.COUGAR;\n          break;\n        case \"Cow_Leather\":\n          sprite.tint = this.COW;\n          break;\n        case \"Deer_Leather\":\n          sprite.tint = this.DEER;\n          break;\n        case \"Dromedary_Leather\":\n          sprite.tint = this.DROMEDARY;\n          break;\n        case \"Leather_Elephant\":\n        case \"Elephant_Leather\":\n          sprite.tint = this.ELEPHANT;\n          break;\n        case \"Elk_Leather\":\n          sprite.tint = this.ELK;\n          break;\n        case \"Emu_Leather\":\n          sprite.tint = this.EMU;\n          break;\n        case \"FoxFennec_Leather\":\n          sprite.tint = this.FOXFENNEC;\n          break;\n        case \"Gazelle_Leather\":\n          sprite.tint = this.GAZELLE;\n          break;\n        case \"Leather_Bear\":\n        case \"GrizzlyBear_Leather\":\n          sprite.tint = this.GRIZZLYBEAR;\n          break;\n        case \"Hare_Leather\":\n          sprite.tint = this.HARE;\n          break;\n        case \"Husky_Leather\":\n          sprite.tint = this.HUSKY;\n          break;\n        case \"Ibex_Leather\":\n          sprite.tint = this.IBEX;\n          break;\n\n        case \"Leather_Lizard\":\n        case \"Iguana_Leather\":\n          sprite.tint = this.IGUANA;\n          break;\n        case \"Leather_Dog\":\n        case \"LabradorRetriever_Leather\":\n          sprite.tint = this.LABRADORRETRIEVER;\n          break;\n        case \"Lynx_Leather\":\n          sprite.tint = this.LYNX;\n          break;\n        case \"Leather_Heavy\":\n        case \"WoolMegasloth\":\n        case \"Megasloth_Leather\":\n          sprite.tint = this.MEGASLOTH;\n          break;\n        case \"Monkey_Leather\":\n          sprite.tint = this.MONKEY;\n          break;\n        case \"Leather_Bird\":\n        case \"Ostrich_Leather\":\n          sprite.tint = this.OSTRICH;\n          break;\n\n        case \"Leather_Panthera\":\n        case \"Panther_Leather\":\n          sprite.tint = this.PANTHER;\n          break;\n        case \"Leather_Pig\":\n        case \"Pig_Leather\":\n          sprite.tint = this.PIG;\n          break;\n        case \"PolarBear_Leather\":\n          sprite.tint = this.POLARBEAR;\n          break;\n        case \"Raccoon_Leather\":\n          sprite.tint = this.RACCOON;\n          break;\n        case \"Ratkin_Cloth\":\n        case \"Ratkin_Leather\":\n        case \"Rat_Leather\":\n          sprite.tint = this.RAT;\n          break;\n        case \"Leather_Fox\":\n        case \"FoxRed_Leather\":\n          sprite.tint = this.FOXRED;\n          break;\n        case \"Leather_Rhinoceros\":\n        case \"Rhinoceros_Leather\":\n          sprite.tint = this.RHINOCEROS;\n          break;\n        case \"Snowhare_Leather\":\n          sprite.tint = this.SNOWHARE;\n          break;\n        case \"Leather_Light\":\n        case \"Squirrel_Leather\":\n          sprite.tint = this.SQUIRREL;\n          break;\n        case \"Leather_Wolf\":\n        case \"WolfTimber_Leather\":\n          sprite.tint = this.WOLFTIMBER;\n          break;\n        case \"Tortoise_Leather\":\n          sprite.tint = this.TORTOISE;\n          break;\n        case \"Turkey_Leather\":\n          sprite.tint = this.TURKEY;\n          break;\n        case \"Warg_Leather\":\n          sprite.tint = this.WARG;\n          break;\n        case \"WildBoar_Leather\":\n          sprite.tint = this.WILDBOAR;\n          break;\n        case \"Leather_Dog\":\n        case \"YorkshireTerrier_Leather\":\n          sprite.tint = this.YORKSHIRETERRIER;\n          break;\n        case \"Leather_Thrumbo\":\n          sprite.tint = this.THRUMBO;\n          break;\n        case \"Leather_Plain\":\n          sprite.tint = this.LEATHER;\n          break;\n        case \"Leather_Patch\":\n          sprite.tint = 0x5a4b3c;\n          break;\n        case \"Leather_Human\":\n        case \"Human_Leather\":\n          sprite.tint = this.HUMAN;\n          break;\n        case \"Steel\":\n          sprite.tint = this.STEEL;\n          break;\n        case \"Plasteel\":\n          sprite.tint = this.PLASTEEL;\n          break;\n        case \"Jade\":\n          sprite.tint = this.JADE;\n          break;\n        case \"Gold\":\n          sprite.tint = this.GOLD;\n          break;\n        case \"Silver\":\n          sprite.tint = this.SILVER;\n          break;\n        case \"Uranium\":\n          sprite.tint = this.URANIUM;\n          break;\n        case \"StandingLamp_Red\":\n          sprite.tint = 0xFF0000;\n          break;\n        case \"StandingLamp_Blue\":\n          sprite.tint = 0x0000FF;\n          break;\n        case \"StandingLamp_Green\":\n          sprite.tint = 0x00FF00;\n          break;\n        case \"Synthread\":\n          sprite.tint = this.SYNTHREAD;\n          break;\n          case \"Blueprint\":\n            sprite.alpha = 0.5;\n            sprite.tint = 0x99eeff;\n          break;\n        default:\n          //thingSprite.tint = 0xffffff;\n      }\n    }\n\n    return sprite;\n  }\n\n  matchWall(chunk) {\n\n    let direction = 0;\n\n    let single = [\n      [0, 0, 0],\n      [0, 1, 0],\n      [0, 0, 0]\n    ];\n    let straightN = [\n      [0, 1, 0],\n      [0, 1, 0],\n      [0, 0, 0]\n    ];\n    let straightE = [\n      [0, 0, 0],\n      [0, 1, 1],\n      [0, 0, 0]\n    ];\n    let straightS = [\n      [0, 0, 0],\n      [0, 1, 0],\n      [0, 1, 0]\n    ];\n    let straightW = [\n      [0, 0, 0],\n      [1, 1, 0],\n      [0, 0, 0]\n    ];\n    let cross = [\n      [0, 1, 0],\n      [1, 1, 1],\n      [0, 1, 0]\n    ];\n    let straightV = [\n      [0, 1, 0],\n      [0, 1, 0],\n      [0, 1, 0]\n    ];\n    let straightH = [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 0, 0]\n    ];\n    let teeN = [\n      [0, 1, 0],\n      [1, 1, 1],\n      [0, 0, 0]\n    ];\n    let teeE = [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 1, 0]\n    ];\n    let teeS = [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 1, 0]\n    ];\n    let teeW = [\n      [0, 1, 0],\n      [1, 1, 0],\n      [0, 1, 0]\n    ];\n    let lN = [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 0, 0]\n    ];\n    let lE = [\n      [0, 0, 0],\n      [0, 1, 1],\n      [0, 1, 0]\n    ];\n    let lS = [\n      [0, 0, 0],\n      [1, 1, 0],\n      [0, 1, 0]\n    ];\n    let lW = [\n      [0, 1, 0],\n      [1, 1, 0],\n      [0, 0, 0]\n    ];\n\n    if (this.matchArrays(straightH, chunk)) {\n      direction = 6;\n    } else if (this.matchArrays(straightV, chunk)) {\n      direction = 9;\n    } else if (this.matchArrays(straightN, chunk)) {\n      direction = 13;\n    } else if (this.matchArrays(straightE, chunk)) {\n      direction = 14;\n    } else if (this.matchArrays(straightS, chunk)) {\n      direction = 8;\n    } else if (this.matchArrays(straightW, chunk)) {\n      direction = 4;\n    } else if (this.matchArrays(cross, chunk)) {\n      direction = 3;\n      //direction = null;\n    } else if (this.matchArrays(teeN, chunk)) {\n      direction = 7;\n    } else if (this.matchArrays(teeE, chunk)) {\n      direction = 11;\n    } else if (this.matchArrays(teeS, chunk)) {\n      direction = 2;\n    } else if (this.matchArrays(teeW, chunk)) {\n      direction = 1;\n    } else if (this.matchArrays(lN, chunk)) {\n      direction = 15;\n    } else if (this.matchArrays(lE, chunk)) {\n      direction = 10;\n    } else if (this.matchArrays(lS, chunk)) {\n      direction = 0;\n    } else if (this.matchArrays(lW, chunk)) {\n      direction = 5;\n    } else if (this.matchArrays(single, chunk)) {\n      direction = 12;\n    } else {\n      //  console.log(chunk);\n    }\n    return direction;\n  }\n\n  thingAlign(sprite, data) {\n\n    let outputSprite = sprite;\n\n    if (data.rot) {\n      if (data.rot == 1) {\n        outputSprite.angle = 90;\n      }\n      if (data.rot == 2) {\n        outputSprite.angle = 180;\n      }\n      if (data.rot == 3) {\n        outputSprite.angle = -90;\n      }\n    }\n\n    //1X1\n    if (outputSprite.height == this.TILESIZE && outputSprite.width == this.TILESIZE) {\n      outputSprite.anchor.setTo(0, 1);\n      if (data.rot) {\n        if (data.rot == 1) {\n          outputSprite.anchor.setTo(1, 1);\n        }\n        if (data.rot == 2) {\n          outputSprite.anchor.setTo(1, 0);\n        }\n        if (data.rot == 3) {\n          outputSprite.anchor.setTo(0, 0);\n        }\n      }\n      //2X1\n    } else if (outputSprite.height == (this.TILESIZE * 2) &&\n      outputSprite.width == this.TILESIZE) { //\n\n      outputSprite.anchor.setTo(0, 1);\n      if (data.rot) {\n        if (data.rot == 1) {\n          outputSprite.anchor.setTo(1, 1);\n        }\n        if (data.rot == 2) {\n          outputSprite.anchor.setTo(1, 0.5);\n        }\n        if (data.rot == 3) {\n          outputSprite.anchor.setTo(0, 0.5);\n        }\n      }\n      //1X4\n    } else if (outputSprite.height == (this.TILESIZE * 4) &&\n      outputSprite.width == this.TILESIZE) { //\n\n      outputSprite.anchor.setTo(0, 0.75);\n      if (data.rot) {\n        if (data.rot == 1) {\n          outputSprite.anchor.setTo(1, 0.75);\n        }\n        if (data.rot == 2) {\n          outputSprite.anchor.setTo(1, 0.5);\n        }\n        if (data.rot == 3) {\n          outputSprite.anchor.setTo(0, 0.5);\n        }\n      }\n      //2x1\n    } else if (outputSprite.height == this.TILESIZE &&\n      outputSprite.width == (this.TILESIZE * 2)) {\n      outputSprite.anchor.setTo(0, 1);\n      if (data.rot) {\n        if (data.rot == 1) {\n          outputSprite.anchor.setTo(0.5, 1);\n        }\n        if (data.rot == 2) {\n          outputSprite.anchor.setTo(0.5, 0);\n        }\n        if (data.rot == 3) {\n          outputSprite.anchor.setTo(0, 0);\n        }\n      }\n      //4x2\n    } else if (outputSprite.height == (this.TILESIZE * 4) &&\n      outputSprite.width == (this.TILESIZE * 2)) {\n      outputSprite.anchor.setTo(0, 0.75);\n      if (data.rot) {\n        if (data.rot == 1) {\n          outputSprite.anchor.setTo(0.5, 1);\n        }\n        if (data.rot == 2) {\n          outputSprite.anchor.setTo(0.6, 0.6);\n        }\n        if (data.rot == 3) {\n          outputSprite.anchor.setTo(1, 0.5);\n        }\n      }\n      //4x2\n    }else if (outputSprite.height == (this.TILESIZE * 2) &&\n      outputSprite.width == (this.TILESIZE * 4)) {\n      outputSprite.anchor.setTo(0.4, 0.75);\n      if (data.rot) {\n        if (data.rot == 1) {\n          outputSprite.anchor.setTo(0.5, 1);\n        }\n        if (data.rot == 2) {\n          outputSprite.anchor.setTo(0.6, 0.6);\n        }\n        if (data.rot == 3) {\n          outputSprite.anchor.setTo(1, 0.5);\n        }\n      }\n      //2x2\n    } else if (outputSprite.height == (this.TILESIZE * 2) &&\n      outputSprite.width == (this.TILESIZE * 2)) {\n\n      outputSprite.anchor.setTo(0, 1);\n      if (data.rot) {\n        if (data.rot == 1) {\n          outputSprite.anchor.setTo(0.5, 1);\n        }\n        if (data.rot == 2) {\n          outputSprite.anchor.setTo(0.5, 0.5);\n        }\n        if (data.rot == 3) {\n          outputSprite.anchor.setTo(0, 0.5);\n        }\n      }\n      //3x2\n    } else if (outputSprite.height == (this.TILESIZE * 2) &&\n      outputSprite.width == (this.TILESIZE * 3)) {\n\n      outputSprite.anchor.setTo(0.35, 1);\n      if (data.rot) {\n        if (data.rot == 1) {\n          outputSprite.anchor.setTo(0.5, 1);\n        }\n        if (data.rot == 2) {\n          outputSprite.anchor.setTo(0.5, 0.5);\n        }\n        if (data.rot == 3) {\n          outputSprite.anchor.setTo(0.35, 0.6);\n        }\n      }\n      //2x3\n    } else if (outputSprite.height == (this.TILESIZE * 3) &&\n      outputSprite.width == (this.TILESIZE * 2)) {\n\n      outputSprite.anchor.setTo(0, 0.65);\n      if (data.rot) {\n        if (data.rot == 1) {\n          outputSprite.anchor.setTo(0.5, 1);\n        }\n        if (data.rot == 2) {\n          outputSprite.anchor.setTo(0.5, 0.5);\n        }\n        if (data.rot == 3) {\n          outputSprite.anchor.setTo(0, 0.5);\n        }\n      }\n\n      //3x3\n    }else if (outputSprite.height == (this.TILESIZE * 3) &&\n      outputSprite.width == (this.TILESIZE * 3)) {\n        outputSprite.anchor.setTo(0.35, 0.65);\n        if (data.rot == 1) {\n          outputSprite.anchor.setTo(0.5, 0.5);\n        }\n        if (data.rot == 2) {\n          outputSprite.anchor.setTo(0.65, 0.35);\n        }\n        if (data.rot == 3) {\n          outputSprite.anchor.setTo(0.5, 0.5);\n        }\n      //3X1\n    } else if (outputSprite.height == this.TILESIZE &&\n      outputSprite.width == (this.TILESIZE * 3)) {\n      outputSprite.anchor.setTo(0.35, 1);\n      if (data.rot == 1) {\n        outputSprite.anchor.setTo(0.65, 1);\n      }\n      if (data.rot == 2) {\n        outputSprite.anchor.setTo(0.65, 0);\n      }\n      if (data.rot == 3) {\n        outputSprite.anchor.setTo(0.35, 0);\n      }\n      //4x4\n    } else if (outputSprite.height == (this.TILESIZE * 4) &&\n      outputSprite.width == (this.TILESIZE * 4)) {\n      if (!data.rot) {\n        outputSprite.anchor.setTo(0.25, 0.75);\n      }\n      if (data.rot == 1) {\n        outputSprite.anchor.setTo(0.5, 0.75);\n      }\n      if (data.rot == 2) {\n        outputSprite.anchor.setTo(0.5, 0.5);\n      }\n      if (data.rot == 3) {\n        outputSprite.anchor.setTo(0.75, 0.25);\n      }\n      //6x6\n    } else if (outputSprite.height == (this.TILESIZE * 6) &&\n      outputSprite.width == (this.TILESIZE * 6)) {\n      outputSprite.anchor.setTo(0.35, 0.65);\n      //5x2\n    } else if (outputSprite.height == (this.TILESIZE * 2) &&\n      outputSprite.width == (this.TILESIZE * 5)) {\n      outputSprite.anchor.setTo(0.4, 1);\n      if (data.rot) {\n        if (data.rot == 1) {\n          outputSprite.anchor.setTo(0.5, 1);\n        }\n        if (data.rot == 2) {\n          outputSprite.anchor.setTo(0.6, 0.5);\n        }\n        if (data.rot == 3) {\n          outputSprite.anchor.setTo(1, 0.5);\n        }\n      }\n      //3x4\n    } else if (outputSprite.height == (this.TILESIZE * 4) &&\n      outputSprite.width == (this.TILESIZE * 3)) {\n      outputSprite.anchor.setTo(0.5, 0.35);\n      if (data.rot) {\n        if (data.rot == 1) {\n          outputSprite.anchor.setTo(0.5, 0.65);\n        }\n        if (data.rot == 2) {\n          outputSprite.anchor.setTo(0.65, 0.5);\n        }\n        if (data.rot == 3) {\n          outputSprite.anchor.setTo(0.35, 0.5);\n        }\n      }\n      //4x1\n    }else if (outputSprite.height == this.TILESIZE &&\n      outputSprite.width == (this.TILESIZE * 4)) {\n      outputSprite.anchor.setTo(0, 1);\n      if (data.rot) {\n        if (data.rot == 1) {\n          outputSprite.anchor.setTo(0.5, 1);\n        }\n        if (data.rot == 2) {\n          outputSprite.anchor.setTo(0.5, 0);\n        }\n        if (data.rot == 3) {\n          outputSprite.anchor.setTo(0, 0);\n        }\n      }\n    } else {\n      outputSprite.anchor.setTo(0, 1);\n    }\n    return outputSprite;\n  }\n  matchArrays(a, b) {\n    for (let i = 0; i < a.length; i++) {\n      for (let j = 0; j < b.length; j++) {\n        if (a[i][j] != b[i][j]) {\n          return false\n        }\n      }\n    }\n    return true;\n  }\n\n  //Is this a wall?\n  isWall(stuff) {\n    switch (stuff) {\n      case \"Wall\":\n      case \"SmoothedGranite\":\n      case \"SmoothedSandstone\":\n      case \"SmoothedLimestone\":\n      case \"SmoothedMarble\":\n      case \"SmoothedSlate\":\n        return true;\n        break;\n      default:\n        return false\n    }\n  }\n\n  isResource(stuff){\n    switch (stuff) {\n      case \"Granite\":\n      case \"Limestone\":\n      case \"Sandstone\":\n      case \"Marble\":\n      case \"Slate\":\n      case \"MineableSteel\":\n      case \"MineableUranium\":\n      case \"MineableGold\":\n      case \"MineableJade\":\n      case \"MineableSilver\":\n      case \"MineableComponents\":\n      case \"MineableComponentsIndustrial\":\n      case \"MineablePlasteel\":\n        return true;\n        break;\n      default:\n        return false;\n    }\n  }\n  //Is this stuff allowed? Return true\n  //Used so we dont render stuff like dirt and pawns\n  isAllowedStuff(stuff) {\n\n    let preRegex = new RegExp('(.*)\\_')\n\n    if (preRegex.exec(stuff)) { //0.19 Change everyhing to Filth_xxx\n      if (preRegex.exec(stuff)[1] == \"Filth\" || preRegex.exec(stuff)[1] == \"Blueprint\")\n        return false;\n    }\n\n    switch (stuff) {\n      case \"Filth\":\n      case \"Trash\":\n      case \"AnimalFilth\":\n      case \"Vomit\":\n      case \"Blood\":\n      case \"Slime\":\n      case \"CorpseBile\":\n      case \"RubbleBuilding\":\n      case \"FilthDirt\":\n      case \"FilthBlood\":\n      case \"FilthAnimalFilth\":\n      case \"FilthAsh\":\n      case \"FilthCorpseBile\":\n      case \"FilthVomit\":\n      case \"FilthAmnioticFluid\":\n      case \"FilthSlime\":\n      case \"FilthBloodInsect\":\n      case \"FilthFireFoam\":\n      case \"FilthSand\":\n      case \"Blight\":\n      case \"PowerConduit\":\n      case \"PowerConduitInvisible\": //COMMON MOD\n      case \"sewagePipeStuff\": //MOD\n      case \"SandbagRubble\":\n      case \"Corpse_Leather\":\n      case \"Centipede_Corpse\":\n      case \"Scyther_Corpse\":\n      case \"Corpse\":\n      case \"Frame\":\n      case \"Letter\":\n      case \"Short\":\n      case \"Blueprint\":\n      case \"Blueprint_Install\":\n      case \"Install\":\n      case \"RectTrigger\":\n      case \"RockRubble\":\n      case \"RubbleRock\":\n      case \"BuildingRubble\":\n      case \"SlagRubble\":\n      case \"Centipede\":\n      case \"Scyther\":\n      case \"Lancer\":\n      case \"ActiveDropPod\":\n      case \"Fire\":\n      case \"Spark\":\n        return false;\n        break;\n      case \"Human\":\n        return false;\n        break;\n      default:\n        return true\n    }\n  }\n\n  isAnimal(stuff) {\n    switch (stuff) {\n      case \"Alpaca\":\n      case \"Alphabeaver\":\n      case \"FoxArctic\":\n      case \"Fox_Arctic\":\n      case \"WolfArctic\":\n      case \"Wolf_Arctic\":\n      case \"Boomalope\":\n      case \"Boomrat\":\n      case \"Capybara\":\n      case \"Caribou\":\n      case \"Cassowary\":\n      case \"Cat\":\n      case \"Chicken\":\n      case \"Chinchilla\":\n      case \"Cobra\":\n      case \"Cougar\":\n      case \"Cow\":\n      case \"Deer\":\n      case \"Dromedary\":\n      case \"Elephant\":\n      case \"Elk\":\n      case \"Emu\":\n      case \"FoxFennec\":\n      case \"Fox_Fennec\":\n      case \"Gazelle\":\n      case \"GrizzlyBear\":\n      case \"Hare\":\n      case \"Husky\":\n      case \"Ibex\":\n      case \"Iguana\":\n      case \"LabradorRetriever\":\n      case \"Lynx\":\n      case \"Megascarab\":\n      case \"Megasloth\":\n      case \"Megaspider\":\n      case \"Monkey\":\n      case \"Muffalo\":\n      case \"Ostrich\":\n      case \"Panther\":\n      case \"Pig\":\n      case \"PolarBear\":\n      case \"Raccoon\":\n      case \"Rat\":\n      case \"FoxRed\":\n      case \"Fox_Red\":\n      case \"Rhinoceros\":\n      case \"Snowhare\":\n      case \"Spelopede\":\n      case \"Squirrel\":\n      case \"Thrumbo\":\n      case \"WolfTimber\":\n      case \"Wolf_Timber\":\n      case \"Tortoise\":\n      case \"Turkey\":\n      case \"Warg\":\n      case \"WildBoar\":\n      case \"YorkshireTerrier\":\n      case \"Grizzly\":\n      case \"Timber\":\n        return false;\n        break;\n      default:\n        return true;\n    }\n  }\n\n  makeCSV(iArray) {\n\n    let outputCSV = '';\n    let dataArray = this.formatArray(iArray);\n\n    for (let y = 0; y < this.worldSize.y; y++) {\n      for (let x = 0; x < this.worldSize.x; x++) {\n        if (dataArray[y][x] == undefined) {\n          console.log('No data @ ' + ' ' + y + ' ' + x);\n        }\n        if (dataArray[y][x] != undefined) {\n          outputCSV += dataArray[y][x];\n        }\n        if (x < (this.worldSize.x) - 1) {\n          outputCSV += ',';\n        }\n      }\n      if (y < this.worldSize.y - 1) {\n        outputCSV += \"\\n\";\n      }\n    }\n    return outputCSV;\n\n  }\n\n  //maps raw rimworld IDs to Tilemap IDs\n  mapTextures(iArray, param,underGrid) {\n\n    if (param == \"terrain\") {\n      //Fix For tiles Metal, Silver, Gold and Sterile tiles\n      for (let j = 0; j < iArray.length; j++) {\n        if (iArray[j] == 101 || iArray[j] == 246 || iArray[j] == 37 || iArray[j] == 199) {\n          if (underGrid[j] != 0) {\n            //Just shift the ID up one since we only care about tiles under dirt\n            iArray[j] += 1;\n          }\n        }\n      }\n\n      for (let i = 0; i < iArray.length; i++) {\n        //TINT THE TERRAIN TILE\n        switch (iArray[i]) {\n          case 2: //Concrete\n            iArray[i] = 1;\n            break;\n          case 235: //Paved\n            iArray[i] = 2;\n            break;\n          case 70: //Wood\n            iArray[i] = 3;\n            break;\n          case 247: //metal //IF UNDER\n            iArray[i] = 4;\n            break;\n          case 38: //silver //IF UNDER\n            iArray[i] = 5;\n            break;\n          case 200: //gold  //IF UNDER\n            iArray[i] = 6;\n            break;\n          case 102: //sterile //If under\n            iArray[i] = 7;\n            break;\n          case 174: //red\n            iArray[i] = 8;\n            break;\n          case 232: //green\n            iArray[i] = 9;\n            break;\n          case 202: //blue\n            iArray[i] = 10;\n            break;\n          case 46: //cream\n            iArray[i] = 11;\n            break;\n          case 231: //dark\n            iArray[i] = 12;\n            break;\n          case 41: //burned wood\n            iArray[i] = 13;\n            break;\n          case 171: //burned carpet\n            iArray[i] = 14;\n            break;\n          case 88: //sandstone tile\n            iArray[i] = 15;\n            break;\n          case 224: //granite tile\n            iArray[i] = 16;\n            break;\n          case 160: //limestone tile\n            iArray[i] = 17;\n            break;\n          case 219: //slate tile\n            iArray[i] = 18;\n            break;\n          case 126: //Marble tile\n            iArray[i] = 19;\n            break;\n          case 173: //slate flag\n            iArray[i] = 20;\n            break;\n          case 169: //sandstone flag\n            iArray[i] = 21;\n            break;\n          case 245: //granite flag\n            iArray[i] = 22;\n            break;\n          case 59: //limestone flag\n            iArray[i] = 23;\n            break;\n          case 1: //marble flagstone\n            iArray[i] = 24;\n            break;\n          case 166: //sand\n            iArray[i] = 25;\n            break;\n          case 161: //soil\n            iArray[i] = 26;\n            break;\n          case 239: //marshy soil\n            iArray[i] = 27;\n            break;\n          case 115: // rich soil\n            iArray[i] = 28;\n            break;\n          case 48: //mud\n            iArray[i] = 29;\n            break;\n          case 6: //marsh\n            iArray[i] = 30;\n            break;\n          case 73: //gravel\n            iArray[i] = 31;\n            break;\n          case 158: //lichen covered\n            iArray[i] = 32;\n            break;\n          case 255: //ice\n            iArray[i] = 33;\n            break;\n          case 205: //broken asphalt\n            iArray[i] = 34;\n            break;\n          case 78: // packed dirt\n            iArray[i] = 35;\n            break;\n          case 37: //underwall\n            iArray[i] = 36;\n            break;\n          case 140: //deep water //DEEPOCEANWATER MISSING!!!!\n            iArray[i] = 37;\n            break;\n          case 58: //moving deep water\n            iArray[i] = 38;\n            break;\n          case 181: //shallow water\n            iArray[i] = 39;\n            break;\n          case 137: //shallow ocean\n            iArray[i] = 40;\n            break;\n          case 212: //shallow moving water\n            iArray[i] = 40;\n            break;\n          case 56: //rough sandstone\n            iArray[i] = 41;\n            break;\n          case 246: // rough hewn sandstone\n            iArray[i] = 42;\n            break;\n          case 154: //smooth sandstone\n            iArray[i] = 43;\n            break;\n          case 222: // rough granite\n            iArray[i] = 44;\n            break;\n          case 116: // rough hewn granite\n            iArray[i] = 45;\n            break;\n          case 199: //smooth granite\n            iArray[i] = 46;\n            break;\n          case 99: //rough limestone\n            iArray[i] = 47;\n            break;\n          case 82: // rought hewn limestone\n            iArray[i] = 48;\n            break;\n          case 238: //smooth limestone\n            iArray[i] = 49;\n            break;\n          case 148: //rough slate\n            iArray[i] = 50;\n            break;\n          case 101: //rough hewn slate\n            iArray[i] = 51;\n            break;\n          case 184: //smooth slate\n            iArray[i] = 52;\n            break;\n          case 57: //rough marble\n            iArray[i] = 53;\n            break;\n          case 135: //rough hewn marble\n            iArray[i] = 54;\n            break;\n          case 208: //smooth marble\n            iArray[i] = 55;\n            break;\n          case 21: //Moving river water?\n            iArray[i] = 38;\n            break;\n          case 71: //Bridge\n            iArray[i] = 3;\n            break;\n          case 153: //Softsand\n            iArray[i] = 25;\n            break;\n          default:\n            console.log(iArray[i]);\n        }\n        iArray[i] = iArray[i] -= 1; //fix for index offset\n      }\n    }\n    return iArray;\n  }\n\n}\n\nexport default Utils;\n"
  ]
}